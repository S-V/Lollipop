/* Do NOT modify this file! It has been autogenerated by the tools.*/
/* File created by HLSL wrapper generator version 0.5 on Tuesday, May 15th, at 19-50-36 */

#pragma once

// Vertex formats

// 4 input layouts

class VertexData;

namespace GPU
{
	
enum { NUM_VERTEX_FORMATS = 4 };

#pragma pack (push,1)
	
	//==============================================================================================================================================
	//
	//	Vertex_P3f
	//
	//==============================================================================================================================================
	//
// D:/_/Development/SourceCode/Renderer/GPU/source/r_vertex_formats.fx(10,18)
	struct Vertex_P3f
	{
		float3		xyz;	// Position ( position )		
		
		// 12 bytes
		
		enum { Stride = 12 };	// size of a single vertex, in bytes
		
		// vertex components enum
		enum Elements
		{
			xyz_index = 0,
			NumElements = 1
		};
		
		// size of each element, in bytes
		enum ElementSizes
		{
			xyz_size = 12,
		};
		
		// vertex component mask
		enum
		{
			Mask = 0
				| (1 << VEU_Position)
		};
		
		// vertex buffer streams
		enum Streams
		{
			xyz_stream = 0,
			NumStreams = 1
		};
		
		// Strides of each vertex buffer.
		// Each stride is the size (in bytes) of the elements
		// that are to be used from that vertex buffer.
		enum StreamStrides
		{
			xyz_stream_size = 12,
		};
		
		// Offsets of each element relative to the corresponding vertex buffer stream.
		enum ElementOffsetsWithinStream
		{
			xyz_stream_offset = 0,
		};
		
		typedef Vertex_P3f THIS_TYPE;
		
		enum { UID = 0 }; // unique index (within this shader library)
		enum { GUID = 1865681512 }; // unique vertex format hash
		
	
	public:	// Public member functions
		static const UINT* GetElementStridesArray()
		{
			static const UINT elementStridesArray[1] = { 12 };
			return elementStridesArray;
		}
		static const UINT* GetStreamStridesArray()
		{
			static const UINT streamStridesArray[1] = { 12 };
			return streamStridesArray;
		}
		static void AssembleVertexData( const IndexedMesh& src, VertexData& dest );
	
	public:	// Input layout
		static ID3D11InputLayoutPtr layout;
	};
	mxDECLARE_POD_TYPE( Vertex_P3f );
	
	
	//==============================================================================================================================================
	//
	//	Vertex_P3f_TEX2f
	//
	//==============================================================================================================================================
	//
// D:/_/Development/SourceCode/Renderer/GPU/source/r_vertex_formats.fx(22,24)
	struct Vertex_P3f_TEX2f
	{
		float3		xyz;	// Position ( position )		
		float2		uv;	// TexCoord ( texture coordinates )		
		
		// 12 + 8 = 20 bytes
		
		enum { Stride = 20 };	// size of a single vertex, in bytes
		
		// vertex components enum
		enum Elements
		{
			xyz_index = 0,
			uv_index = 1,
			NumElements = 2
		};
		
		// size of each element, in bytes
		enum ElementSizes
		{
			xyz_size = 12,
			uv_size = 8,
		};
		
		// vertex component mask
		enum
		{
			Mask = 0
				| (1 << VEU_Position)
				| (1 << VEU_TexCoords)
		};
		
		// vertex buffer streams
		enum Streams
		{
			xyz_uv_stream = 0,
			NumStreams = 1
		};
		
		// Strides of each vertex buffer.
		// Each stride is the size (in bytes) of the elements
		// that are to be used from that vertex buffer.
		enum StreamStrides
		{
			xyz_uv_stream_size = 20,
		};
		
		// Offsets of each element relative to the corresponding vertex buffer stream.
		enum ElementOffsetsWithinStream
		{
			xyz_stream_offset = 0,
			uv_stream_offset = 12,
		};
		
		typedef Vertex_P3f_TEX2f THIS_TYPE;
		
		enum { UID = 1 }; // unique index (within this shader library)
		enum { GUID = 442361730 }; // unique vertex format hash
		
	
	public:	// Public member functions
		static const UINT* GetElementStridesArray()
		{
			static const UINT elementStridesArray[2] = { 12, 8 };
			return elementStridesArray;
		}
		static const UINT* GetStreamStridesArray()
		{
			static const UINT streamStridesArray[1] = { 20 };
			return streamStridesArray;
		}
		static void AssembleVertexData( const IndexedMesh& src, VertexData& dest );
	
	public:	// Input layout
		static ID3D11InputLayoutPtr layout;
	};
	mxDECLARE_POD_TYPE( Vertex_P3f_TEX2f );
	
	
	//==============================================================================================================================================
	//
	//	Vertex_P3f_TEX2f_N4Ub_T4Ub
	//
	//==============================================================================================================================================
	//
// D:/_/Development/SourceCode/Renderer/GPU/source/r_vertex_formats.fx(68,34)
	struct Vertex_P3f_TEX2f_N4Ub_T4Ub
	{
		float3		xyz;	// Position ( position )		
		float2		uv;	// TexCoord ( texture coordinates )		
		rxNormal4		N;	// Normal ( normal (T') )		
		rxNormal4		T;	// Tangent ( tangent (P') )		
		
		// 12 + 8 + 4 + 4 = 28 bytes
		
		enum { Stride = 28 };	// size of a single vertex, in bytes
		
		// vertex components enum
		enum Elements
		{
			xyz_index = 0,
			uv_index = 1,
			N_index = 2,
			T_index = 3,
			NumElements = 4
		};
		
		// size of each element, in bytes
		enum ElementSizes
		{
			xyz_size = 12,
			uv_size = 8,
			N_size = 4,
			T_size = 4,
		};
		
		// vertex component mask
		enum
		{
			Mask = 0
				| (1 << VEU_Position)
				| (1 << VEU_TexCoords)
				| (1 << VEU_Normal)
				| (1 << VEU_Tangent)
		};
		
		// vertex buffer streams
		enum Streams
		{
			xyz_stream = 0,
			uv_N_T_stream = 1,
			NumStreams = 2
		};
		
		// Strides of each vertex buffer.
		// Each stride is the size (in bytes) of the elements
		// that are to be used from that vertex buffer.
		enum StreamStrides
		{
			xyz_stream_size = 12,
			uv_N_T_stream_size = 16,
		};
		
		// Offsets of each element relative to the corresponding vertex buffer stream.
		enum ElementOffsetsWithinStream
		{
			xyz_stream_offset = 0,
			uv_stream_offset = 0,
			N_stream_offset = 8,
			T_stream_offset = 12,
		};
		
		typedef Vertex_P3f_TEX2f_N4Ub_T4Ub THIS_TYPE;
		
		enum { UID = 2 }; // unique index (within this shader library)
		enum { GUID = 1756490716 }; // unique vertex format hash
		
	
	public:	// Public member functions
		static const UINT* GetElementStridesArray()
		{
			static const UINT elementStridesArray[4] = { 12, 8, 4, 4 };
			return elementStridesArray;
		}
		static const UINT* GetStreamStridesArray()
		{
			static const UINT streamStridesArray[2] = { 12, 16 };
			return streamStridesArray;
		}
		static void AssembleVertexData( const IndexedMesh& src, VertexData& dest );
	
	public:	// Input layout
		static ID3D11InputLayoutPtr layout;
	};
	mxDECLARE_POD_TYPE( Vertex_P3f_TEX2f_N4Ub_T4Ub );
	
	
	//==============================================================================================================================================
	//
	//	Vertex_P3f_TEX2f_COL4Ub
	//
	//==============================================================================================================================================
	//
// D:/_/Development/SourceCode/Renderer/GPU/source/r_vertex_formats.fx(133,31)
	struct Vertex_P3f_TEX2f_COL4Ub
	{
		float3		xyz;	// Position ( transformed position )		
		float2		uv;	// TexCoord ( texture coordinates )		
		R8G8B8A8		rgba;	// Color ( vertex color )		
		
		// 12 + 8 + 4 = 24 bytes
		
		enum { Stride = 24 };	// size of a single vertex, in bytes
		
		// vertex components enum
		enum Elements
		{
			xyz_index = 0,
			uv_index = 1,
			rgba_index = 2,
			NumElements = 3
		};
		
		// size of each element, in bytes
		enum ElementSizes
		{
			xyz_size = 12,
			uv_size = 8,
			rgba_size = 4,
		};
		
		// vertex component mask
		enum
		{
			Mask = 0
				| (1 << VEU_Position)
				| (1 << VEU_TexCoords)
				| (1 << VEU_Color)
		};
		
		// vertex buffer streams
		enum Streams
		{
			xyz_uv_rgba_stream = 0,
			NumStreams = 1
		};
		
		// Strides of each vertex buffer.
		// Each stride is the size (in bytes) of the elements
		// that are to be used from that vertex buffer.
		enum StreamStrides
		{
			xyz_uv_rgba_stream_size = 24,
		};
		
		// Offsets of each element relative to the corresponding vertex buffer stream.
		enum ElementOffsetsWithinStream
		{
			xyz_stream_offset = 0,
			uv_stream_offset = 12,
			rgba_stream_offset = 20,
		};
		
		typedef Vertex_P3f_TEX2f_COL4Ub THIS_TYPE;
		
		enum { UID = 3 }; // unique index (within this shader library)
		enum { GUID = 624034122 }; // unique vertex format hash
		
	
	public:	// Public member functions
		static const UINT* GetElementStridesArray()
		{
			static const UINT elementStridesArray[3] = { 12, 8, 4 };
			return elementStridesArray;
		}
		static const UINT* GetStreamStridesArray()
		{
			static const UINT streamStridesArray[1] = { 24 };
			return streamStridesArray;
		}
		static void AssembleVertexData( const IndexedMesh& src, VertexData& dest );
	
	public:	// Input layout
		static ID3D11InputLayoutPtr layout;
	};
	mxDECLARE_POD_TYPE( Vertex_P3f_TEX2f_COL4Ub );
	
#pragma pack (pop)
} // namespace GPU

//--------------------------------------------------------------//
//				End Of File.									//
//--------------------------------------------------------------//

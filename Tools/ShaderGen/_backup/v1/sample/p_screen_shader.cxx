#include "Renderer_PCH.h"
#pragma hdrstop
#include "Renderer.h"

#include <Graphics/DX11/src/DX11Private.h>
#include <Graphics/DX11/src/DX11Helpers.h>


#include "p_screen_shader.hxx"

namespace GPU
{
	//===========================================================================
	//	Shaders
	//===========================================================================
	
	ID3D11SamplerState* p_fullscreen_textured_triangle_shader::linearSampler = nil;
	ID3D11ShaderResourceView* p_fullscreen_textured_triangle_shader::sourceTexture = nil;
	const char* p_fullscreen_textured_triangle_shader::VS_EntryPoint = "FullScreenTriangle_VS";
	const char* p_fullscreen_textured_triangle_shader::PS_EntryPoint = "PS_Main";
	const char* p_fullscreen_textured_triangle_shader::Name = "p_fullscreen_textured_triangle_shader";
	const rxStaticString p_fullscreen_textured_triangle_shader::Source =
	{
		495, // length
		{
0x23,0x6c,0x69,0x6e,0x65,0x20,0x35,0x20,0x22,0x45,0x3a,0x2f,0x5f,0x2f,0x45,0x6e,0x67,0x69,0x6e,0x65,0x2f,0x44,0x65,0x76,0x65,0x6c,0x6f,0x70,0x6d,0x65,0x6e,0x74,0x2f,0x53,0x6f,0x75,0x72,0x63,0x65,0x43,0x6f,0x64,0x65,0x2f,0x52,0x65,0x6e,0x64,0x65,0x72,0x65,0x72,0x2f,0x47,0x50,0x55,0x2f,0x73,0x6f,0x75,0x72,0x63,0x65,0x2f,0x70,0x5f,0x73,0x63,0x72,0x65,0x65,0x6e,0x5f,0x73,0x68,
0x61,0x64,0x65,0x72,0x2e,0x66,0x78,0x22,0xa,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x53,0x74,0x61,0x74,0x65,0x20,0x6c,0x69,0x6e,0x65,0x61,0x72,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x73,0x30,0x29,0x3b,0xa,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x44,0x20,0x73,0x6f,0x75,0x72,0x63,0x65,0x54,0x65,0x78,0x74,0x75,0x72,0x65,
0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x74,0x30,0x29,0x3b,0xa,0xa,0x23,0x6c,0x69,0x6e,0x65,0x20,0x39,0x20,0x22,0x45,0x3a,0x2f,0x5f,0x2f,0x45,0x6e,0x67,0x69,0x6e,0x65,0x2f,0x44,0x65,0x76,0x65,0x6c,0x6f,0x70,0x6d,0x65,0x6e,0x74,0x2f,0x53,0x6f,0x75,0x72,0x63,0x65,0x43,0x6f,0x64,0x65,0x2f,0x52,0x65,0x6e,0x64,0x65,0x72,0x65,0x72,0x2f,0x47,0x50,0x55,0x2f,
0x73,0x6f,0x75,0x72,0x63,0x65,0x2f,0x70,0x5f,0x73,0x63,0x72,0x65,0x65,0x6e,0x5f,0x73,0x68,0x61,0x64,0x65,0x72,0x2e,0x66,0x78,0x22,0xa,0xd,0xa,0x9,0x9,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x22,0x68,0x5f,0x73,0x63,0x72,0x65,0x65,0x6e,0x5f,0x73,0x68,0x61,0x64,0x65,0x72,0x2e,0x68,0x6c,0x73,0x6c,0x22,0xd,0xa,0x9,0x9,0xd,0xa,0x9,0x9,0x66,0x6c,0x6f,0x61,0x74,
0x33,0x20,0x50,0x53,0x5f,0x4d,0x61,0x69,0x6e,0x28,0x20,0x69,0x6e,0x20,0x56,0x53,0x5f,0x53,0x63,0x72,0x65,0x65,0x6e,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x69,0x6e,0x70,0x75,0x74,0x20,0x29,0x20,0x3a,0x20,0x53,0x56,0x5f,0x54,0x61,0x72,0x67,0x65,0x74,0xd,0xa,0x9,0x9,0x7b,0xd,0xa,0x9,0x9,0x9,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x6f,0x75,0x74,0x70,0x75,0x74,0x43,0x6f,0x6c,
0x6f,0x72,0x20,0x3d,0x20,0x30,0x2e,0x30,0x66,0x3b,0xd,0xa,0x9,0x9,0x9,0x6f,0x75,0x74,0x70,0x75,0x74,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x73,0x6f,0x75,0x72,0x63,0x65,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,0x28,0x20,0x6c,0x69,0x6e,0x65,0x61,0x72,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x69,0x6e,0x70,0x75,0x74,0x2e,0x74,0x65,0x78,
0x43,0x6f,0x6f,0x72,0x64,0x20,0x29,0x2e,0x72,0x67,0x62,0x3b,0xd,0xa,0x9,0x9,0x9,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,0x70,0x75,0x74,0x43,0x6f,0x6c,0x6f,0x72,0x3b,0xd,0xa,0x9,0x9,0x7d,0xd,0xa,0x9,0x0,			
		}
	};
	ShaderInstance p_fullscreen_textured_triangle_shader::shaderInstances[1];
	
	void p_fullscreen_textured_triangle_shader::Initialize()
	{
		ShaderInfo d;
		p_fullscreen_textured_triangle_shader::GetLoadInfo( d );
		
		p_fullscreen_textured_triangle_shader::Load( d, graphics.shaders );
	}
	
	void p_fullscreen_textured_triangle_shader::GetLoadInfo( ShaderInfo & outInfo )
	{
		outInfo.source.code = p_fullscreen_textured_triangle_shader::Source.data;
		outInfo.source.codeLength = p_fullscreen_textured_triangle_shader::Source.size;
		outInfo.uniqueId = p_fullscreen_textured_triangle_shader::UID;
		outInfo.name = p_fullscreen_textured_triangle_shader::Name;
		outInfo.VS_EntryPoint = p_fullscreen_textured_triangle_shader::VS_EntryPoint;
		outInfo.PS_EntryPoint = p_fullscreen_textured_triangle_shader::PS_EntryPoint;
		outInfo.numInstances = p_fullscreen_textured_triangle_shader::NumInstances;
		outInfo.load = p_fullscreen_textured_triangle_shader::Load;
	}
	
	extern SamplerState samplerState_SS_Bilinear;
	
	void p_fullscreen_textured_triangle_shader::Load( const ShaderInfo& shaderInfo, ShaderManager* compiler )
	{
		p_fullscreen_textured_triangle_shader::linearSampler = samplerState_SS_Bilinear.p.Ptr;
		compiler->NewShaderInstance( shaderInfo, shaderInstances[0] );
	}
	
	void p_fullscreen_textured_triangle_shader::Shutdown()
	{
		graphics.shaders->Destroy_ShaderInstances( 1, p_fullscreen_textured_triangle_shader::shaderInstances );
	}
	TypedConstantBuffer< p_fullscreen_colored_triangle_shader::Data >	p_fullscreen_colored_triangle_shader::cb_Data;
	const char* p_fullscreen_colored_triangle_shader::VS_EntryPoint = "FullScreenTriangle_VS";
	const char* p_fullscreen_colored_triangle_shader::PS_EntryPoint = "PS_Main";
	const char* p_fullscreen_colored_triangle_shader::Name = "p_fullscreen_colored_triangle_shader";
	const rxStaticString p_fullscreen_colored_triangle_shader::Source =
	{
		348, // length
		{
0x23,0x6c,0x69,0x6e,0x65,0x20,0x33,0x31,0x20,0x22,0x45,0x3a,0x2f,0x5f,0x2f,0x45,0x6e,0x67,0x69,0x6e,0x65,0x2f,0x44,0x65,0x76,0x65,0x6c,0x6f,0x70,0x6d,0x65,0x6e,0x74,0x2f,0x53,0x6f,0x75,0x72,0x63,0x65,0x43,0x6f,0x64,0x65,0x2f,0x52,0x65,0x6e,0x64,0x65,0x72,0x65,0x72,0x2f,0x47,0x50,0x55,0x2f,0x73,0x6f,0x75,0x72,0x63,0x65,0x2f,0x70,0x5f,0x73,0x63,0x72,0x65,0x65,0x6e,0x5f,0x73,
0x68,0x61,0x64,0x65,0x72,0x2e,0x66,0x78,0x22,0xa,0x63,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x44,0x61,0x74,0x61,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x62,0x30,0x29,0xa,0x7b,0xa,0x9,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0xa,0x7d,0x3b,0xa,0xa,0x23,0x6c,0x69,0x6e,0x65,0x20,0x33,0x37,0x20,0x22,0x45,0x3a,0x2f,0x5f,0x2f,0x45,
0x6e,0x67,0x69,0x6e,0x65,0x2f,0x44,0x65,0x76,0x65,0x6c,0x6f,0x70,0x6d,0x65,0x6e,0x74,0x2f,0x53,0x6f,0x75,0x72,0x63,0x65,0x43,0x6f,0x64,0x65,0x2f,0x52,0x65,0x6e,0x64,0x65,0x72,0x65,0x72,0x2f,0x47,0x50,0x55,0x2f,0x73,0x6f,0x75,0x72,0x63,0x65,0x2f,0x70,0x5f,0x73,0x63,0x72,0x65,0x65,0x6e,0x5f,0x73,0x68,0x61,0x64,0x65,0x72,0x2e,0x66,0x78,0x22,0xa,0xd,0xa,0x9,0x9,0x23,0x69,
0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x22,0x68,0x5f,0x73,0x63,0x72,0x65,0x65,0x6e,0x5f,0x73,0x68,0x61,0x64,0x65,0x72,0x2e,0x68,0x6c,0x73,0x6c,0x22,0xd,0xa,0x9,0x9,0xd,0xa,0x9,0x9,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x50,0x53,0x5f,0x4d,0x61,0x69,0x6e,0x28,0x20,0x69,0x6e,0x20,0x56,0x53,0x5f,0x53,0x63,0x72,0x65,0x65,0x6e,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x69,0x6e,0x70,
0x75,0x74,0x20,0x29,0x20,0x3a,0x20,0x53,0x56,0x5f,0x54,0x61,0x72,0x67,0x65,0x74,0xd,0xa,0x9,0x9,0x7b,0xd,0xa,0x9,0x9,0x9,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0xd,0xa,0x9,0x9,0x7d,0xd,0xa,0x9,0x0,			
		}
	};
	ShaderInstance p_fullscreen_colored_triangle_shader::shaderInstances[1];
	
	void p_fullscreen_colored_triangle_shader::Initialize()
	{
		p_fullscreen_colored_triangle_shader::cb_Data.Create( GetDeviceContext() );
		
		ShaderInfo d;
		p_fullscreen_colored_triangle_shader::GetLoadInfo( d );
		
		p_fullscreen_colored_triangle_shader::Load( d, graphics.shaders );
	}
	
	void p_fullscreen_colored_triangle_shader::GetLoadInfo( ShaderInfo & outInfo )
	{
		outInfo.source.code = p_fullscreen_colored_triangle_shader::Source.data;
		outInfo.source.codeLength = p_fullscreen_colored_triangle_shader::Source.size;
		outInfo.uniqueId = p_fullscreen_colored_triangle_shader::UID;
		outInfo.name = p_fullscreen_colored_triangle_shader::Name;
		outInfo.VS_EntryPoint = p_fullscreen_colored_triangle_shader::VS_EntryPoint;
		outInfo.PS_EntryPoint = p_fullscreen_colored_triangle_shader::PS_EntryPoint;
		outInfo.numInstances = p_fullscreen_colored_triangle_shader::NumInstances;
		outInfo.load = p_fullscreen_colored_triangle_shader::Load;
	}
	
	
	void p_fullscreen_colored_triangle_shader::Load( const ShaderInfo& shaderInfo, ShaderManager* compiler )
	{
		compiler->NewShaderInstance( shaderInfo, shaderInstances[0] );
	}
	
	void p_fullscreen_colored_triangle_shader::Shutdown()
	{
		p_fullscreen_colored_triangle_shader::cb_Data.Destroy();
		graphics.shaders->Destroy_ShaderInstances( 1, p_fullscreen_colored_triangle_shader::shaderInstances );
	}
	
	//===========================================================================
	//	Creation / Destruction function
	//===========================================================================
	
	void InitializeModule_p_screen_shader()
	{
		p_fullscreen_textured_triangle_shader::Initialize();
		p_fullscreen_colored_triangle_shader::Initialize();
	}
	
	void ShutdownModule_p_screen_shader()
	{
		p_fullscreen_textured_triangle_shader::Shutdown();
		p_fullscreen_colored_triangle_shader::Shutdown();
	}
}

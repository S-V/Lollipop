/* Do NOT modify this file! It has been autogenerated by the tools.*/
/* File created by HLSL wrapper generator version 0.5 on Friday, February 24th, at 23-30-24 */
/* Copyright © 2012 ShaderGen.*/

#pragma once

// Declarations for interfacing with the shader library

// 9 render targets
// 9 sampler states
// 6 depth stencil states
// 8 rasterizer states
// 4 blend states
// 20 shader programs (67 unique combinations)
// 4 input layouts

namespace GPU
{
	// Shader library info
	enum { TotalNumberOfShaders = 20 };
	
	UINT ShaderNameToIndex( const char* str );
	const char* ShaderIndexToName( UINT idx );
	
	extern const FileTime TIME_STAMP;
	
	/*
	=============================================================================
		Function declarations
	=============================================================================
	*/
	
	void Initialize( const GrShaderLibraryContext& context );
	
	void Shutdown();
	
	// releases render targets that depend on backbuffer size; should be called before resizing viewports
	void ReleaseRenderTargets();
	
	// recreates render targets that depend on backbuffer size; should be called after resizing viewports
	void ReallocRenderTargets( UINT sizeX, UINT sizeY );
	
	// Reflection/Introspection
	
	void EnumerateRenderTargets     ( F_EnumerateRenderTargets* callback, void* userData );
	void EnumerateSamplerStates     ( F_EnumerateSamplerStates* callback, void* userData );
	void EnumerateDepthStencilStates( F_EnumerateDepthStencilStates* callback, void* userData );
	void EnumerateRasterizerStates  ( F_EnumerateRasterizerStates* callback, void* userData );
	void EnumerateBlendStates       ( F_EnumerateBlendStates* callback, void* userData );
	
	/*
	=============================================================================
		Render targets
	=============================================================================
	*/

// D:/_/Development/SourceCode/Renderer/GPU/source/r_render_targets.fx(11,13)
	extern RenderTarget RT_Normal_SpecIntensity;
// D:/_/Development/SourceCode/Renderer/GPU/source/r_render_targets.fx(20,13)
	extern RenderTarget RT_Diffuse_SpecPower;
// D:/_/Development/SourceCode/Renderer/GPU/source/r_render_targets.fx(29,13)
	extern RenderTarget RT_LinearDepth;
// D:/_/Development/SourceCode/Renderer/GPU/source/r_render_targets.fx(71,13)
	extern RenderTarget RT_HDR_SceneColor;
// D:/_/Development/SourceCode/Renderer/GPU/source/r_render_targets.fx(80,13)
	extern RenderTarget RT_Ping;
// D:/_/Development/SourceCode/Renderer/GPU/source/r_render_targets.fx(87,13)
	extern RenderTarget RT_Pong;
// D:/_/Development/SourceCode/Renderer/GPU/source/r_render_targets.fx(96,13)
	extern RenderTarget RT_Downscaled_4x4;
// D:/_/Development/SourceCode/Renderer/GPU/source/r_render_targets.fx(103,13)
	extern RenderTarget RT_HBlur_Map;
// D:/_/Development/SourceCode/Renderer/GPU/source/r_render_targets.fx(110,13)
	extern RenderTarget RT_FinalBlur_Map;
	
	/*
	=============================================================================
		Multiple render targets
	=============================================================================
	*/

// D:/_/Development/SourceCode/Renderer/GPU/source/r_render_targets.fx(51,18)
	struct GBuffer
	{
		enum ERenderTargets
		{
			RT_Normal_SpecIntensity_index = 0,
			RT_Diffuse_SpecPower_index = 1,
			RT_LinearDepth_index = 2,
			NumRenderTargets = 3
		};
		
		// render target views in SoA layout:
		dxPtr< ID3D11RenderTargetView >	pMRT[ NumRenderTargets ];
		// render targets are cleared with these colors:
		FColor	clearColors[ NumRenderTargets ];
	
	public:
		FORCEINLINE GBuffer()
		{
			Initialize();
		}
		void Initialize()
		{
			this->pMRT[ RT_Normal_SpecIntensity_index ] = RT_Normal_SpecIntensity.pRTV;
			this->pMRT[ RT_Diffuse_SpecPower_index ] = RT_Diffuse_SpecPower.pRTV;
			this->pMRT[ RT_LinearDepth_index ] = RT_LinearDepth.pRTV;
			
			this->clearColors[ RT_Normal_SpecIntensity_index ].Set( 0.000000f, 0.000000f, 0.000000f, 0.000000f );
			this->clearColors[ RT_Diffuse_SpecPower_index ].Set( 0.000000f, 0.000000f, 0.000000f, 1.000000f );
			this->clearColors[ RT_LinearDepth_index ].Set( 0.000000f, 0.000000f, 0.000000f, 0.000000f );
		}
		void ReleaseRenderTargets()
		{
			this->pMRT[ RT_Normal_SpecIntensity_index ] = nil;
			this->pMRT[ RT_Diffuse_SpecPower_index ] = nil;
			this->pMRT[ RT_LinearDepth_index ] = nil;
		}
		FORCEINLINE void ClearRenderTargets( ID3D11DeviceContext* theContext )
		{
			{
				ID3D11RenderTargetView* pRTV = this->pMRT[ RT_Normal_SpecIntensity_index ];
				const FLOAT* colorRGBA = this->clearColors[  RT_Normal_SpecIntensity_index ].ToFloatPtr();
				
				theContext->ClearRenderTargetView( pRTV, colorRGBA );
			}
			{
				ID3D11RenderTargetView* pRTV = this->pMRT[ RT_Diffuse_SpecPower_index ];
				const FLOAT* colorRGBA = this->clearColors[  RT_Diffuse_SpecPower_index ].ToFloatPtr();
				
				theContext->ClearRenderTargetView( pRTV, colorRGBA );
			}
			{
				ID3D11RenderTargetView* pRTV = this->pMRT[ RT_LinearDepth_index ];
				const FLOAT* colorRGBA = this->clearColors[  RT_LinearDepth_index ].ToFloatPtr();
				
				theContext->ClearRenderTargetView( pRTV, colorRGBA );
			}
		}
		
		FORCEINLINE void Bind( ID3D11DeviceContext* theContext, ID3D11DepthStencilView* pDSV = nil )
		{
			// Set render targets and depth-stencil.
			
			theContext->OMSetRenderTargets(
				NumRenderTargets,
				c_cast(ID3D11RenderTargetView**) this->pMRT,
				pDSV
			);
		}
		
		FORCEINLINE ID3D11RenderTargetView** GetRenderTargetsArray()
		{
			return c_cast(ID3D11RenderTargetView**) this->pMRT;
		}
		
		FORCEINLINE UINT Num() const
		{
			return ARRAY_SIZE(this->pMRT);
		}
	};
	
	/*
	=============================================================================
		Sampler states
	=============================================================================
	*/

// D:/_/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(7,13)
	extern ID3D11SamplerStatePtr SS_Point;
// D:/_/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(13,13)
	extern ID3D11SamplerStatePtr SS_Bilinear;
// D:/_/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(20,13)
	extern ID3D11SamplerStatePtr SS_Trilinear;
// D:/_/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(27,13)
	extern ID3D11SamplerStatePtr SS_Aniso;
// D:/_/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(35,13)
	extern ID3D11SamplerStatePtr SS_PointClamp;
// D:/_/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(41,13)
	extern ID3D11SamplerStatePtr SS_LinearClamp;
// D:/_/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(49,13)
	extern ID3D11SamplerStatePtr SS_ShadowMap;
// D:/_/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(63,13)
	extern ID3D11SamplerStatePtr SS_ShadowMapPCF;
// D:/_/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(77,13)
	extern ID3D11SamplerStatePtr SS_ShadowMapPCF_Bilinear;
	
	/*
	=============================================================================
		Depth-stencil states
	=============================================================================
	*/

// D:/_/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(98,18)
	extern ID3D11DepthStencilStatePtr DS_NormalZTestWriteNoStencil;
// D:/_/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(105,18)
	extern ID3D11DepthStencilStatePtr DS_NormalZTestNoWriteNoStencil;
// D:/_/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(112,18)
	extern ID3D11DepthStencilStatePtr DS_NoZTestWriteNoStencil;
// D:/_/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(119,18)
	extern ID3D11DepthStencilStatePtr DS_ZTestLessEqual_ZWrite_NoStencil;
// D:/_/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(131,18)
	extern ID3D11DepthStencilStatePtr DS_ZTestGreaterNoZWriteNoStencil;
// D:/_/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(142,18)
	extern ID3D11DepthStencilStatePtr DS_ZTestLessEqualNoZWriteNoStencil;
	
	/*
	=============================================================================
		Rasterizer states
	=============================================================================
	*/

// D:/_/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(155,16)
	extern ID3D11RasterizerStatePtr RS_SolidNoCull;
// D:/_/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(162,16)
	extern ID3D11RasterizerStatePtr RS_SolidCullBack;
// D:/_/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(169,16)
	extern ID3D11RasterizerStatePtr RS_SolidCullFront;
// D:/_/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(176,16)
	extern ID3D11RasterizerStatePtr RS_WireframeCullBack;
// D:/_/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(184,16)
	extern ID3D11RasterizerStatePtr RS_SolidNoCullNoClip;
// D:/_/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(191,16)
	extern ID3D11RasterizerStatePtr RS_WireframeNoCullNoClip;
// D:/_/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(373,16)
	extern ID3D11RasterizerStatePtr RS_EyeOutsideLightVolume;
// D:/_/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(397,16)
	extern ID3D11RasterizerStatePtr RS_BuildShadowMap;
	
	/*
	=============================================================================
		Blend states
	=============================================================================
	*/

// D:/_/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(205,11)
	extern ID3D11BlendStatePtr BS_NoBlending;
// D:/_/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(212,11)
	extern ID3D11BlendStatePtr BS_AdditiveBlending;
// D:/_/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(223,11)
	extern ID3D11BlendStatePtr BS_AlphaBlending;
// D:/_/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(235,11)
	extern ID3D11BlendStatePtr BS_NoBlendingNoColorWrites;
	
	/*
	=============================================================================
		State blocks
	=============================================================================
	*/

// D:/_/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(248,11)
	extern StateBlock Default;
// D:/_/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(264,11)
	extern StateBlock DebugPrimitives;
// D:/_/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(276,11)
	extern StateBlock HitProxy_ZTestLessEqualCullBack;
// D:/_/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(298,11)
	extern StateBlock SolidNoCullNoZTestNoClipNoBlend;
// D:/_/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(323,11)
	extern StateBlock TranslucentCullBack;
// D:/_/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(337,11)
	extern StateBlock SkyLast;
// D:/_/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(355,11)
	extern StateBlock Deferred_Light_FullScreen_Additive;
// D:/_/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(381,11)
	extern StateBlock Deferred_Light_ConvexMesh_Additive;
// D:/_/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(406,11)
	extern StateBlock Build_Shadow_Map;
	
	//--------------------------------------------------------------
	//	Globals
	//--------------------------------------------------------------
	//
	struct MX_GRAPHICS_API Shared_Globals
	{
#pragma pack (push,16)
		struct PerFrame
		{
			float4 screenSize_invSize;
			float1 globalTimeInSeconds;
		};
#pragma pack (pop)
	
	public:	// Constant buffers (manually updated)
		static TConstantBuffer< PerFrame >	cb_PerFrame;	// VS GS PS
	
	public:	// Sampler states (set manually)
		static ID3D11SamplerState* pointSampler;	// VS GS PS
		static ID3D11SamplerState* linearSampler;	// VS GS PS
		static ID3D11SamplerState* anisotropicSampler;	// VS GS PS
		static ID3D11SamplerState* pointClampSampler;	// VS GS PS
		static ID3D11SamplerState* linearClampSampler;	// VS GS PS
		static ID3D11SamplerState* colorMapSampler;	// VS GS PS
		static ID3D11SamplerState* detailMapSampler;	// VS GS PS
		static ID3D11SamplerState* normalMapSampler;	// VS GS PS
		static ID3D11SamplerState* specularMapSampler;	// VS GS PS
		static ID3D11SamplerState* attenuationSampler;	// VS GS PS
		static ID3D11SamplerState* cubeMapSampler;	// VS GS PS
		static ID3D11SamplerState* shadowMapSampler;	// VS GS PS
		static ID3D11SamplerState* shadowMapPCFSampler;	// VS GS PS
		static ID3D11SamplerState* shadowMapPCFBilinearSampler;	// VS GS PS
	
	public:	// Public methods
		static inline void Set( ID3D11DeviceContext* theContext )
		{
			// Bind constant buffers
			cb_PerFrame.BindTo_VS( theContext, 0 );
			cb_PerFrame.BindTo_PS( theContext, 0 );
			
			// Bind sampler states to slots
			theContext->VSSetSamplers(
				0,
				14,
				(ID3D11SamplerState**)&pointSampler
			);
			theContext->PSSetSamplers(
				0,
				14,
				(ID3D11SamplerState**)&pointSampler
			);
		}
	};
	
	//--------------------------------------------------------------
	//	View
	//--------------------------------------------------------------
	//
	struct MX_GRAPHICS_API Shared_View
	{
#pragma pack (push,16)
		struct PerView
		{
			float4x4 viewMatrix;
			float4x4 viewProjectionMatrix;
			float4x4 inverseViewMatrix;
			float4x4 projectionMatrix;
			float4x4 inverseProjectionMatrix;
			float4 tanHalfFoV;
			float4 depthClipPlanes;
			float4 frustumCornerVS_FarTopLeft;
			float4 frustumCornerVS_FarTopRight;
			float4 frustumCornerVS_FarBottomLeft;
			float4 frustumCornerVS_FarBottomRight;
		};
#pragma pack (pop)
	
	public:	// Constant buffers (manually updated)
		static TConstantBuffer< PerView >	cb_PerView;	// VS GS PS
	
	public:	// Public methods
		static inline void Set( ID3D11DeviceContext* theContext )
		{
			// Bind constant buffers
			cb_PerView.BindTo_VS( theContext, 1 );
			cb_PerView.BindTo_PS( theContext, 1 );
		}
	};
	
	//--------------------------------------------------------------
	//	Object
	//--------------------------------------------------------------
	//
	struct MX_GRAPHICS_API Shared_Object
	{
#pragma pack (push,16)
		struct PerObject
		{
			float4x4 worldMatrix;
			float4x4 worldViewMatrix;
			float4x4 worldViewProjectionMatrix;
		};
#pragma pack (pop)
	
	public:	// Constant buffers (manually updated)
		static TConstantBuffer< PerObject >	cb_PerObject;	// VS GS PS
	
	public:	// Public methods
		static inline void Set( ID3D11DeviceContext* theContext )
		{
			// Bind constant buffers
			cb_PerObject.BindTo_VS( theContext, 2 );
			cb_PerObject.BindTo_PS( theContext, 2 );
		}
	};
	
	//--------------------------------------------------------------
	//	GBuffer
	//--------------------------------------------------------------
	//
	struct MX_GRAPHICS_API Shared_GBuffer
	{
	
	public:	// Shader resources (set manually)
		static ID3D11ShaderResourceView* RT_normal_specMul;	// VS GS PS
								enum { SR_Slot_RT_normal_specMul = 0 };
		static ID3D11ShaderResourceView* RT_diffuse_specExp;	// VS GS PS
								enum { SR_Slot_RT_diffuse_specExp = 1 };
		static ID3D11ShaderResourceView* RT_linearDepth;	// VS GS PS
								enum { SR_Slot_RT_linearDepth = 2 };
	
	public:	// Public methods
		static inline void Set( ID3D11DeviceContext* theContext )
		{
			
			// Bind shader resources
			theContext->VSSetShaderResources(
				0,
				3,
				(ID3D11ShaderResourceView**)&RT_normal_specMul
			);
			theContext->PSSetShaderResources(
				0,
				3,
				(ID3D11ShaderResourceView**)&RT_normal_specMul
			);
		}
	};
	
	//--------------------------------------------------------------
	//	LocalLightData
	//--------------------------------------------------------------
	//
	struct MX_GRAPHICS_API Shared_LocalLightData
	{
#pragma pack (push,16)
		struct PerLocalLight
		{
			float4 lightDiffuseColor;
			float4 lightPosition;
			float4 lightRadiusInvRadius;
			float4 lightSpecularColor;
			float4 spotLightDirection;
			float4 spotLightAngles;
			float4x4 lightShapeTransform;
			float4x4 eyeToLightProjection;
			float lightProjectorIntensity;
			float lightShadowDepthBias;
		};
#pragma pack (pop)
	
	public:	// Constant buffers (manually updated)
		static TConstantBuffer< PerLocalLight >	cb_PerLocalLight;	// VS GS PS
	
	public:	// Public methods
		static inline void Set( ID3D11DeviceContext* theContext )
		{
			// Bind constant buffers
			cb_PerLocalLight.BindTo_VS( theContext, 3 );
			cb_PerLocalLight.BindTo_PS( theContext, 3 );
		}
	};
	
} // namespace GPU

//--------------------------------------------------------------//
//				End Of File.									//
//--------------------------------------------------------------//


/* This ALWAYS GENERATED file contains the implementation for the interfaces */
/* File created by HLSL wrapper generator version 0.0 on Sunday, September 11th, at 23:59:42 */


#include "Renderer_PCH.h"
#pragma hdrstop
#include "Renderer.h"

#include <Base/Text/TextUtils.h>

#include <Renderer/Core/Geometry.h>

#include "Main.hxx"
#include "Main.hxx"

namespace GPU
{
	// sorted in ascending order
	const char* g_shaderNames[ TotalNumberOfShaders ] =
	{
		p_batched_lines::Name,
		p_deferred_fill_buffers_fallback::Name,
		p_fullscreen_colored_triangle_shader::Name,
		p_fullscreen_textured_triangle_shader::Name,
		p_test_shader::Name,
	};
	
	UINT ShaderNameToIndex( const char* str ) {
		return BinaryStringSearch( g_shaderNames, ARRAY_SIZE(g_shaderNames), str );
	}
	
	const char* ShaderIndexToName( UINT idx ) {
		Assert( idx < ARRAY_SIZE(g_shaderNames) );
		return g_shaderNames[ idx ];
	}
	
	//===========================================================================
	//	Render targets
	//===========================================================================
	
// E:/_/Engine/Development/SourceCode/Renderer/GPU/source/r_render_targets.fx(8,13)
	RenderTarget renderTarget_RT_Diffuse_SpecPower;
// E:/_/Engine/Development/SourceCode/Renderer/GPU/source/r_render_targets.fx(17,13)
	RenderTarget renderTarget_RT_Normal_SpecIntensity;
// E:/_/Engine/Development/SourceCode/Renderer/GPU/source/r_render_targets.fx(26,13)
	RenderTarget renderTarget_RT_LinearDepth;
// E:/_/Engine/Development/SourceCode/Renderer/GPU/source/r_render_targets.fx(35,13)
	RenderTarget renderTarget_RT_MotionXY;
	
	static void SetupRenderTargets()
	{
		D3D11_TEXTURE2D_DESC texDesc;
		D3D11_RENDER_TARGET_VIEW_DESC rtvDesc;
		D3D11_SHADER_RESOURCE_VIEW_DESC srvDesc;
		ZERO_OUT( texDesc );
		ZERO_OUT( rtvDesc );
		ZERO_OUT( srvDesc );
		
// RT_Diffuse_SpecPower
// "Diffuse & Specular power"
// E:/_/Engine/Development/SourceCode/Renderer/GPU/source/r_render_targets.fx(8,13)
		{
			texDesc.Format				= DXGI_FORMAT_R8G8B8A8_UNORM;
			texDesc.Width				= GetBackbufferWidth();
			texDesc.Height				= GetBackbufferHeight();
			texDesc.MipLevels			= 1;
			texDesc.ArraySize			= 1;
			texDesc.SampleDesc.Count	= 1;
			texDesc.SampleDesc.Quality	= 0;
			texDesc.Usage				= D3D11_USAGE_DEFAULT;
			texDesc.BindFlags			= D3D11_BIND_SHADER_RESOURCE | D3D11_BIND_RENDER_TARGET;
			texDesc.CPUAccessFlags		= 0;
			texDesc.MiscFlags			= 0;
			
			rtvDesc.Format				= DXGI_FORMAT_R8G8B8A8_UNORM;
			rtvDesc.ViewDimension		= D3D11_RTV_DIMENSION_TEXTURE2D;
			rtvDesc.Texture2D.MipSlice	= 0;
			
			srvDesc.Format						= DXGI_FORMAT_R8G8B8A8_UNORM;
			srvDesc.ViewDimension				= D3D11_SRV_DIMENSION_TEXTURE2D;
			srvDesc.Texture2D.MipLevels			= 1;
			srvDesc.Texture2D.MostDetailedMip	= 0;
			
			graphics.resources->Create_RenderTarget( texDesc, rtvDesc, srvDesc, renderTarget_RT_Diffuse_SpecPower );
			dxDbgSetName( renderTarget_RT_Diffuse_SpecPower.pTexture, "RT_Diffuse_SpecPower_T2D" );
			dxDbgSetName( renderTarget_RT_Diffuse_SpecPower.pRTV, "RT_Diffuse_SpecPower_RTV" );
			dxDbgSetName( renderTarget_RT_Diffuse_SpecPower.pSRV, "RT_Diffuse_SpecPower_SRV" );
		}
		
// RT_Normal_SpecIntensity
// "Normals & Specular intensity"
// E:/_/Engine/Development/SourceCode/Renderer/GPU/source/r_render_targets.fx(17,13)
		{
			texDesc.Format				= DXGI_FORMAT_R8G8B8A8_UNORM;
			texDesc.Width				= GetBackbufferWidth();
			texDesc.Height				= GetBackbufferHeight();
			texDesc.MipLevels			= 1;
			texDesc.ArraySize			= 1;
			texDesc.SampleDesc.Count	= 1;
			texDesc.SampleDesc.Quality	= 0;
			texDesc.Usage				= D3D11_USAGE_DEFAULT;
			texDesc.BindFlags			= D3D11_BIND_SHADER_RESOURCE | D3D11_BIND_RENDER_TARGET;
			texDesc.CPUAccessFlags		= 0;
			texDesc.MiscFlags			= 0;
			
			rtvDesc.Format				= DXGI_FORMAT_R8G8B8A8_UNORM;
			rtvDesc.ViewDimension		= D3D11_RTV_DIMENSION_TEXTURE2D;
			rtvDesc.Texture2D.MipSlice	= 0;
			
			srvDesc.Format						= DXGI_FORMAT_R8G8B8A8_UNORM;
			srvDesc.ViewDimension				= D3D11_SRV_DIMENSION_TEXTURE2D;
			srvDesc.Texture2D.MipLevels			= 1;
			srvDesc.Texture2D.MostDetailedMip	= 0;
			
			graphics.resources->Create_RenderTarget( texDesc, rtvDesc, srvDesc, renderTarget_RT_Normal_SpecIntensity );
			dxDbgSetName( renderTarget_RT_Normal_SpecIntensity.pTexture, "RT_Normal_SpecIntensity_T2D" );
			dxDbgSetName( renderTarget_RT_Normal_SpecIntensity.pRTV, "RT_Normal_SpecIntensity_RTV" );
			dxDbgSetName( renderTarget_RT_Normal_SpecIntensity.pSRV, "RT_Normal_SpecIntensity_SRV" );
		}
		
// RT_LinearDepth
// "Depth"
// E:/_/Engine/Development/SourceCode/Renderer/GPU/source/r_render_targets.fx(26,13)
		{
			texDesc.Format				= DXGI_FORMAT_R32_FLOAT;
			texDesc.Width				= GetBackbufferWidth();
			texDesc.Height				= GetBackbufferHeight();
			texDesc.MipLevels			= 1;
			texDesc.ArraySize			= 1;
			texDesc.SampleDesc.Count	= 1;
			texDesc.SampleDesc.Quality	= 0;
			texDesc.Usage				= D3D11_USAGE_DEFAULT;
			texDesc.BindFlags			= D3D11_BIND_SHADER_RESOURCE | D3D11_BIND_RENDER_TARGET;
			texDesc.CPUAccessFlags		= 0;
			texDesc.MiscFlags			= 0;
			
			rtvDesc.Format				= DXGI_FORMAT_R32_FLOAT;
			rtvDesc.ViewDimension		= D3D11_RTV_DIMENSION_TEXTURE2D;
			rtvDesc.Texture2D.MipSlice	= 0;
			
			srvDesc.Format						= DXGI_FORMAT_R32_FLOAT;
			srvDesc.ViewDimension				= D3D11_SRV_DIMENSION_TEXTURE2D;
			srvDesc.Texture2D.MipLevels			= 1;
			srvDesc.Texture2D.MostDetailedMip	= 0;
			
			graphics.resources->Create_RenderTarget( texDesc, rtvDesc, srvDesc, renderTarget_RT_LinearDepth );
			dxDbgSetName( renderTarget_RT_LinearDepth.pTexture, "RT_LinearDepth_T2D" );
			dxDbgSetName( renderTarget_RT_LinearDepth.pRTV, "RT_LinearDepth_RTV" );
			dxDbgSetName( renderTarget_RT_LinearDepth.pSRV, "RT_LinearDepth_SRV" );
		}
		
// RT_MotionXY
// "MotionXY"
// E:/_/Engine/Development/SourceCode/Renderer/GPU/source/r_render_targets.fx(35,13)
		{
			texDesc.Format				= DXGI_FORMAT_R16G16_FLOAT;
			texDesc.Width				= GetBackbufferWidth();
			texDesc.Height				= GetBackbufferHeight();
			texDesc.MipLevels			= 1;
			texDesc.ArraySize			= 1;
			texDesc.SampleDesc.Count	= 1;
			texDesc.SampleDesc.Quality	= 0;
			texDesc.Usage				= D3D11_USAGE_DEFAULT;
			texDesc.BindFlags			= D3D11_BIND_SHADER_RESOURCE | D3D11_BIND_RENDER_TARGET;
			texDesc.CPUAccessFlags		= 0;
			texDesc.MiscFlags			= 0;
			
			rtvDesc.Format				= DXGI_FORMAT_R16G16_FLOAT;
			rtvDesc.ViewDimension		= D3D11_RTV_DIMENSION_TEXTURE2D;
			rtvDesc.Texture2D.MipSlice	= 0;
			
			srvDesc.Format						= DXGI_FORMAT_R16G16_FLOAT;
			srvDesc.ViewDimension				= D3D11_SRV_DIMENSION_TEXTURE2D;
			srvDesc.Texture2D.MipLevels			= 1;
			srvDesc.Texture2D.MostDetailedMip	= 0;
			
			graphics.resources->Create_RenderTarget( texDesc, rtvDesc, srvDesc, renderTarget_RT_MotionXY );
			dxDbgSetName( renderTarget_RT_MotionXY.pTexture, "RT_MotionXY_T2D" );
			dxDbgSetName( renderTarget_RT_MotionXY.pRTV, "RT_MotionXY_RTV" );
			dxDbgSetName( renderTarget_RT_MotionXY.pSRV, "RT_MotionXY_SRV" );
		}
	}
	//===========================================================================
	//	Sampler states
	//===========================================================================
	
// E:/_/Engine/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(7,13)
	SamplerState samplerState_SS_Point;
// E:/_/Engine/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(13,13)
	SamplerState samplerState_SS_Bilinear;
// E:/_/Engine/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(27,13)
	SamplerState samplerState_SS_Aniso;
	
	static void SetupSamplerStates()
	{
		D3D11_SAMPLER_DESC samplerDesc;
		ZERO_OUT( samplerDesc );
		
// SS_Point
// E:/_/Engine/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(7,13)
		{
			samplerDesc.Filter	= D3D11_FILTER_MIN_MAG_MIP_POINT;
			samplerDesc.AddressU	= D3D11_TEXTURE_ADDRESS_CLAMP;
			samplerDesc.AddressV	= D3D11_TEXTURE_ADDRESS_CLAMP;
			samplerDesc.AddressW	= D3D11_TEXTURE_ADDRESS_CLAMP;
			samplerDesc.MipLODBias		= 0;
			samplerDesc.MaxAnisotropy	= 1;
			samplerDesc.ComparisonFunc	= D3D11_COMPARISON_NEVER;
			samplerDesc.BorderColor[0]	= 1.0f;
			samplerDesc.BorderColor[1]	= 1.0f;
			samplerDesc.BorderColor[2]	= 1.0f;
			samplerDesc.BorderColor[3]	= 1.0f;
			samplerDesc.MinLOD			= -FLT_MAX;
			samplerDesc.MaxLOD			= +FLT_MAX;
			
			graphics.resources->Create_SamplerState( samplerDesc, samplerState_SS_Point );
			dxDbgSetName( samplerState_SS_Point.p, "SS_Point" );
		}
		
// SS_Bilinear
// E:/_/Engine/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(13,13)
		{
			samplerDesc.Filter	= D3D11_FILTER_MIN_MAG_LINEAR_MIP_POINT;
			samplerDesc.AddressU	= D3D11_TEXTURE_ADDRESS_WRAP;
			samplerDesc.AddressV	= D3D11_TEXTURE_ADDRESS_WRAP;
			samplerDesc.AddressW	= D3D11_TEXTURE_ADDRESS_CLAMP;
			samplerDesc.MipLODBias		= 0;
			samplerDesc.MaxAnisotropy	= 1;
			samplerDesc.ComparisonFunc	= D3D11_COMPARISON_NEVER;
			samplerDesc.BorderColor[0]	= 1.0f;
			samplerDesc.BorderColor[1]	= 1.0f;
			samplerDesc.BorderColor[2]	= 1.0f;
			samplerDesc.BorderColor[3]	= 1.0f;
			samplerDesc.MinLOD			= -FLT_MAX;
			samplerDesc.MaxLOD			= +FLT_MAX;
			
			graphics.resources->Create_SamplerState( samplerDesc, samplerState_SS_Bilinear );
			dxDbgSetName( samplerState_SS_Bilinear.p, "SS_Bilinear" );
		}
		
// SS_Aniso
// E:/_/Engine/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(27,13)
		{
			samplerDesc.Filter	= D3D11_FILTER_ANISOTROPIC;
			samplerDesc.AddressU	= D3D11_TEXTURE_ADDRESS_WRAP;
			samplerDesc.AddressV	= D3D11_TEXTURE_ADDRESS_WRAP;
			samplerDesc.AddressW	= D3D11_TEXTURE_ADDRESS_CLAMP;
			samplerDesc.MipLODBias		= 0;
			samplerDesc.MaxAnisotropy	= 1;
			samplerDesc.ComparisonFunc	= D3D11_COMPARISON_NEVER;
			samplerDesc.BorderColor[0]	= 1.0f;
			samplerDesc.BorderColor[1]	= 1.0f;
			samplerDesc.BorderColor[2]	= 1.0f;
			samplerDesc.BorderColor[3]	= 1.0f;
			samplerDesc.MinLOD			= -FLT_MAX;
			samplerDesc.MaxLOD			= +FLT_MAX;
			
			graphics.resources->Create_SamplerState( samplerDesc, samplerState_SS_Aniso );
			dxDbgSetName( samplerState_SS_Aniso.p, "SS_Aniso" );
		}
	}
	//===========================================================================
	//	Depth-Stencil states
	//===========================================================================
	
// E:/_/Engine/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(61,18)
	DepthStencilState depthStencilState_DS_NormalZTestWriteNoStencil;
// E:/_/Engine/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(68,18)
	DepthStencilState depthStencilState_DS_NoZTestWriteNoStencil;
	
	static void SetupDepthStencilStates()
	{
		D3D11_DEPTH_STENCIL_DESC depthStencilDesc;
		ZERO_OUT( depthStencilDesc );
		
// DS_NormalZTestWriteNoStencil
// E:/_/Engine/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(61,18)
		{
			depthStencilDesc.DepthEnable	= TRUE;
			depthStencilDesc.DepthWriteMask	= D3D11_DEPTH_WRITE_MASK_ALL;
			depthStencilDesc.DepthFunc	= D3D11_COMPARISON_LESS;
			depthStencilDesc.StencilEnable	= FALSE;
			depthStencilDesc.StencilReadMask	= D3D11_DEFAULT_STENCIL_READ_MASK;
			depthStencilDesc.StencilWriteMask	= D3D11_DEFAULT_STENCIL_WRITE_MASK;
			depthStencilDesc.FrontFace.StencilFailOp		= D3D11_STENCIL_OP_KEEP;
			depthStencilDesc.FrontFace.StencilDepthFailOp	= D3D11_STENCIL_OP_KEEP;
			depthStencilDesc.FrontFace.StencilPassOp		= D3D11_STENCIL_OP_KEEP;
			depthStencilDesc.FrontFace.StencilFunc			= D3D11_COMPARISON_ALWAYS;
			depthStencilDesc.BackFace.StencilFailOp			= D3D11_STENCIL_OP_KEEP;
			depthStencilDesc.BackFace.StencilDepthFailOp	= D3D11_STENCIL_OP_KEEP;
			depthStencilDesc.BackFace.StencilPassOp			= D3D11_STENCIL_OP_KEEP;
			depthStencilDesc.BackFace.StencilFunc			= D3D11_COMPARISON_ALWAYS;
			
			graphics.resources->Create_DepthStencilState( depthStencilDesc, depthStencilState_DS_NormalZTestWriteNoStencil );
			dxDbgSetName( depthStencilState_DS_NormalZTestWriteNoStencil.p, "DS_NormalZTestWriteNoStencil" );
		}
		
// DS_NoZTestWriteNoStencil
// E:/_/Engine/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(68,18)
		{
			depthStencilDesc.DepthEnable	= FALSE;
			depthStencilDesc.DepthWriteMask	= D3D11_DEPTH_WRITE_MASK_ZERO;
			depthStencilDesc.DepthFunc	= D3D11_COMPARISON_LESS;
			depthStencilDesc.StencilEnable	= FALSE;
			depthStencilDesc.StencilReadMask	= D3D11_DEFAULT_STENCIL_READ_MASK;
			depthStencilDesc.StencilWriteMask	= D3D11_DEFAULT_STENCIL_WRITE_MASK;
			depthStencilDesc.FrontFace.StencilFailOp		= D3D11_STENCIL_OP_KEEP;
			depthStencilDesc.FrontFace.StencilDepthFailOp	= D3D11_STENCIL_OP_KEEP;
			depthStencilDesc.FrontFace.StencilPassOp		= D3D11_STENCIL_OP_KEEP;
			depthStencilDesc.FrontFace.StencilFunc			= D3D11_COMPARISON_ALWAYS;
			depthStencilDesc.BackFace.StencilFailOp			= D3D11_STENCIL_OP_KEEP;
			depthStencilDesc.BackFace.StencilDepthFailOp	= D3D11_STENCIL_OP_KEEP;
			depthStencilDesc.BackFace.StencilPassOp			= D3D11_STENCIL_OP_KEEP;
			depthStencilDesc.BackFace.StencilFunc			= D3D11_COMPARISON_ALWAYS;
			
			graphics.resources->Create_DepthStencilState( depthStencilDesc, depthStencilState_DS_NoZTestWriteNoStencil );
			dxDbgSetName( depthStencilState_DS_NoZTestWriteNoStencil.p, "DS_NoZTestWriteNoStencil" );
		}
	}
	//===========================================================================
	//	Rasterizer states
	//===========================================================================
	
// E:/_/Engine/Development/SourceCode/Renderer/GPU/source/p_editor_shaders.fx(1,16)
	RasterizerState rasterizerState_RS_WireframeNoCullNoClip;
// E:/_/Engine/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(82,16)
	RasterizerState rasterizerState_RS_NoCull;
// E:/_/Engine/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(89,16)
	RasterizerState rasterizerState_RS_CullBack;
	
	static void SetupRasterizerStates()
	{
		D3D11_RASTERIZER_DESC rasterizerDesc;
		ZERO_OUT( rasterizerDesc );
		
// RS_WireframeNoCullNoClip
// E:/_/Engine/Development/SourceCode/Renderer/GPU/source/p_editor_shaders.fx(1,16)
		{
			rasterizerDesc.FillMode				= D3D11_FILL_WIREFRAME;
			rasterizerDesc.CullMode				= D3D11_CULL_NONE;
			rasterizerDesc.FrontCounterClockwise	= FALSE;
			rasterizerDesc.DepthBias				= 0;
			rasterizerDesc.DepthBiasClamp		= 0.0f;
			rasterizerDesc.SlopeScaledDepthBias	= 0.0f;
			rasterizerDesc.DepthClipEnable		= FALSE;
			rasterizerDesc.ScissorEnable			= FALSE;
			rasterizerDesc.MultisampleEnable		= FALSE;
			rasterizerDesc.AntialiasedLineEnable	= FALSE;
			
			graphics.resources->Create_RasterizerState( rasterizerDesc, rasterizerState_RS_WireframeNoCullNoClip );
			dxDbgSetName( rasterizerState_RS_WireframeNoCullNoClip.p, "RS_WireframeNoCullNoClip" );
		}
		
// RS_NoCull
// E:/_/Engine/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(82,16)
		{
			rasterizerDesc.FillMode				= D3D11_FILL_SOLID;
			rasterizerDesc.CullMode				= D3D11_CULL_NONE;
			rasterizerDesc.FrontCounterClockwise	= FALSE;
			rasterizerDesc.DepthBias				= 0;
			rasterizerDesc.DepthBiasClamp		= 0.0f;
			rasterizerDesc.SlopeScaledDepthBias	= 0.0f;
			rasterizerDesc.DepthClipEnable		= TRUE;
			rasterizerDesc.ScissorEnable			= FALSE;
			rasterizerDesc.MultisampleEnable		= FALSE;
			rasterizerDesc.AntialiasedLineEnable	= FALSE;
			
			graphics.resources->Create_RasterizerState( rasterizerDesc, rasterizerState_RS_NoCull );
			dxDbgSetName( rasterizerState_RS_NoCull.p, "RS_NoCull" );
		}
		
// RS_CullBack
// E:/_/Engine/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(89,16)
		{
			rasterizerDesc.FillMode				= D3D11_FILL_SOLID;
			rasterizerDesc.CullMode				= D3D11_CULL_BACK;
			rasterizerDesc.FrontCounterClockwise	= FALSE;
			rasterizerDesc.DepthBias				= 0;
			rasterizerDesc.DepthBiasClamp		= 0.0f;
			rasterizerDesc.SlopeScaledDepthBias	= 0.0f;
			rasterizerDesc.DepthClipEnable		= TRUE;
			rasterizerDesc.ScissorEnable			= FALSE;
			rasterizerDesc.MultisampleEnable		= FALSE;
			rasterizerDesc.AntialiasedLineEnable	= FALSE;
			
			graphics.resources->Create_RasterizerState( rasterizerDesc, rasterizerState_RS_CullBack );
			dxDbgSetName( rasterizerState_RS_CullBack.p, "RS_CullBack" );
		}
	}
	//===========================================================================
	//	Blend states
	//===========================================================================
	
// E:/_/Engine/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(122,11)
	BlendState blendState_BS_NoBlending;
	
	static void SetupBlendStates()
	{
		D3D11_BLEND_DESC blendDesc;
		ZERO_OUT( blendDesc );
		
// BS_NoBlending
// E:/_/Engine/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(122,11)
		{
			blendDesc.AlphaToCoverageEnable	= FALSE;
			blendDesc.IndependentBlendEnable	= FALSE;
			blendDesc.RenderTarget[0].BlendEnable	= FALSE;
			blendDesc.RenderTarget[0].SrcBlend		= D3D11_BLEND_ZERO;
			blendDesc.RenderTarget[0].DestBlend		= D3D11_BLEND_ZERO;
			blendDesc.RenderTarget[0].BlendOp		= D3D11_BLEND_OP_ADD;
			blendDesc.RenderTarget[0].SrcBlendAlpha	= D3D11_BLEND_ZERO;
			blendDesc.RenderTarget[0].DestBlendAlpha	= D3D11_BLEND_ZERO;
			blendDesc.RenderTarget[0].BlendOpAlpha	= D3D11_BLEND_OP_ADD;
			blendDesc.RenderTarget[0].RenderTargetWriteMask	= 0x0F;
			
			graphics.resources->Create_BlendState( blendDesc, blendState_BS_NoBlending );
			dxDbgSetName( blendState_BS_NoBlending.p, "BS_NoBlending" );
		}
	}
	//===========================================================================
	//	State blocks
	//===========================================================================
	
// E:/_/Engine/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(160,11)
	StateBlock renderState_Default;
// E:/_/Engine/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(174,11)
	StateBlock renderState_Debug_NoCull;
	
	static void SetupStateBlocks()
	{
		
// Default
// E:/_/Engine/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(160,11)
		{
			renderState_Default.rasterizer   = &rasterizerState_RS_CullBack;
			
			renderState_Default.depthStencil = &depthStencilState_DS_NormalZTestWriteNoStencil;
			renderState_Default.stencilRef   = 0;
			
			renderState_Default.blend           = &blendState_BS_NoBlending;
			renderState_Default.blendFactorRGBA = FColor( 0.000000f, 0.000000f, 0.000000f, 1.000000f );
			renderState_Default.sampleMask      = 0xFFFFFFFF;
		}
		
// Debug_NoCull
// E:/_/Engine/Development/SourceCode/Renderer/GPU/source/r_render_states.fx(174,11)
		{
			renderState_Debug_NoCull.rasterizer   = &rasterizerState_RS_NoCull;
			
			renderState_Debug_NoCull.depthStencil = &depthStencilState_DS_NoZTestWriteNoStencil;
			renderState_Debug_NoCull.stencilRef   = 0;
			
			renderState_Debug_NoCull.blend           = &blendState_BS_NoBlending;
			renderState_Debug_NoCull.blendFactorRGBA = FColor( 0.000000f, 0.000000f, 0.000000f, 1.000000f );
			renderState_Debug_NoCull.sampleMask      = 0xFFFFFFFF;
		}
	}
	TypedConstantBuffer< Shared_Globals::PerFrame >	Shared_Globals::cb_PerFrame;
	ID3D11SamplerState* Shared_Globals::pointSampler = nil;
	ID3D11SamplerState* Shared_Globals::linearSampler = nil;
	ID3D11SamplerState* Shared_Globals::anisotropicSampler = nil;
	ID3D11SamplerState* Shared_Globals::colorMapSampler = nil;
	ID3D11SamplerState* Shared_Globals::detailMapSampler = nil;
	ID3D11SamplerState* Shared_Globals::normalMapSampler = nil;
	ID3D11SamplerState* Shared_Globals::specularMapSampler = nil;
	ID3D11SamplerState* Shared_Globals::attenuationSampler = nil;
	ID3D11SamplerState* Shared_Globals::cubeMapSampler = nil;
	TypedConstantBuffer< Shared_View::PerView >	Shared_View::cb_PerView;
	TypedConstantBuffer< Shared_Object::PerObject >	Shared_Object::cb_PerObject;
	ID3D11ShaderResourceView* Shared_GBuffer::RT0 = nil;
	ID3D11ShaderResourceView* Shared_GBuffer::RT1 = nil;
	ID3D11ShaderResourceView* Shared_GBuffer::RT2 = nil;
	ID3D11ShaderResourceView* Shared_GBuffer::RT3 = nil;
	
	void SetupSharedSections()
	{
		Shared_Globals::cb_PerFrame.Create( GetDeviceContext() );
		Shared_Globals::pointSampler = samplerState_SS_Bilinear.p.Ptr;
		Shared_Globals::linearSampler = samplerState_SS_Bilinear.p.Ptr;
		Shared_Globals::anisotropicSampler = samplerState_SS_Aniso.p.Ptr;
		Shared_Globals::colorMapSampler = samplerState_SS_Bilinear.p.Ptr;
		Shared_Globals::detailMapSampler = samplerState_SS_Bilinear.p.Ptr;
		Shared_Globals::normalMapSampler = samplerState_SS_Bilinear.p.Ptr;
		Shared_Globals::specularMapSampler = samplerState_SS_Bilinear.p.Ptr;
		Shared_Globals::attenuationSampler = samplerState_SS_Bilinear.p.Ptr;
		Shared_Globals::cubeMapSampler = samplerState_SS_Bilinear.p.Ptr;
		Shared_View::cb_PerView.Create( GetDeviceContext() );
		Shared_Object::cb_PerObject.Create( GetDeviceContext() );
	}
	
	//===========================================================================
	//	Shaders
	//===========================================================================
	
	TypedConstantBuffer< p_batched_lines::Data >	p_batched_lines::cb_Data;
	const char* p_batched_lines::VS_EntryPoint = "VSMain";
	const char* p_batched_lines::PS_EntryPoint = "PSMain";
	const char* p_batched_lines::Name = "p_batched_lines";
	const rxStaticString p_batched_lines::Source =
	{
		640, // length
		{
0xa,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x39,0x20,0x22,0x45,0x3a,0x2f,0x5f,0x2f,0x45,0x6e,0x67,0x69,0x6e,0x65,0x2f,0x44,0x65,0x76,0x65,0x6c,0x6f,0x70,0x6d,0x65,0x6e,0x74,0x2f,0x53,0x6f,0x75,0x72,0x63,0x65,0x43,0x6f,0x64,0x65,0x2f,0x52,0x65,0x6e,0x64,0x65,0x72,0x65,0x72,0x2f,0x47,0x50,0x55,0x2f,0x73,0x6f,0x75,0x72,0x63,0x65,0x2f,0x70,0x5f,0x65,0x64,0x69,0x74,0x6f,0x72,0x5f,
0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2e,0x66,0x78,0x22,0xa,0x63,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x44,0x61,0x74,0x61,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x62,0x30,0x29,0xa,0x7b,0xa,0x9,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x76,0x69,0x65,0x77,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,0x69,0x6f,0x6e,0x4d,0x61,0x74,0x72,0x69,0x78,0x3b,0xa,0x9,
0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x6c,0x69,0x6e,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x3b,0xa,0x7d,0x3b,0xa,0xa,0x23,0x6c,0x69,0x6e,0x65,0x20,0x32,0x36,0x20,0x22,0x45,0x3a,0x2f,0x5f,0x2f,0x45,0x6e,0x67,0x69,0x6e,0x65,0x2f,0x44,0x65,0x76,0x65,0x6c,0x6f,0x70,0x6d,0x65,0x6e,0x74,0x2f,0x53,0x6f,0x75,0x72,0x63,0x65,0x43,0x6f,0x64,0x65,0x2f,0x52,0x65,0x6e,0x64,0x65,0x72,0x65,0x72,
0x2f,0x47,0x50,0x55,0x2f,0x73,0x6f,0x75,0x72,0x63,0x65,0x2f,0x70,0x5f,0x65,0x64,0x69,0x74,0x6f,0x72,0x5f,0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2e,0x66,0x78,0x22,0xa,0xd,0xa,0x9,0x9,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x56,0x53,0x49,0x6e,0xd,0xa,0x9,0x9,0x7b,0xd,0xa,0x9,0x9,0x9,0x66,0x6c,0x6f,0x61,0x74,0x34,0x9,0x78,0x79,0x7a,0x20,0x3a,0x20,0x50,0x6f,0x73,0x69,
0x74,0x69,0x6f,0x6e,0x3b,0xd,0xa,0x9,0x9,0x9,0x66,0x6c,0x6f,0x61,0x74,0x34,0x9,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3a,0x20,0x43,0x6f,0x6c,0x6f,0x72,0x3b,0xd,0xa,0x9,0x9,0x7d,0x3b,0xd,0xa,0x9,0x9,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x50,0x53,0x49,0x6e,0xd,0xa,0x9,0x9,0x7b,0xd,0xa,0x9,0x9,0x9,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x70,0x6f,0x73,0x48,0x20,0x3a,
0x20,0x53,0x56,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0xd,0xa,0x9,0x9,0x9,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3a,0x20,0x43,0x6f,0x6c,0x6f,0x72,0x3b,0xd,0xa,0x9,0x9,0x7d,0x3b,0xd,0xa,0x9,0x9,0x76,0x6f,0x69,0x64,0x20,0x56,0x53,0x4d,0x61,0x69,0x6e,0x28,0x20,0x69,0x6e,0x20,0x56,0x53,0x49,0x6e,0x20,0x49,0x4e,0x2c,0x20,0x6f,
0x75,0x74,0x20,0x50,0x53,0x49,0x6e,0x20,0x4f,0x55,0x54,0x20,0x29,0xd,0xa,0x9,0x9,0x7b,0xd,0xa,0x9,0x9,0x9,0x4f,0x55,0x54,0x2e,0x70,0x6f,0x73,0x48,0x20,0x3d,0x20,0x6d,0x75,0x6c,0x28,0x20,0x49,0x4e,0x2e,0x78,0x79,0x7a,0x2c,0x20,0x76,0x69,0x65,0x77,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,0x69,0x6f,0x6e,0x4d,0x61,0x74,0x72,0x69,0x78,0x20,0x29,0x3b,0xd,0xa,0x9,0x9,0x9,
0x4f,0x55,0x54,0x2e,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x49,0x4e,0x2e,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0xd,0xa,0x9,0x9,0x7d,0xd,0xa,0x9,0x9,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x50,0x53,0x4d,0x61,0x69,0x6e,0x28,0x20,0x69,0x6e,0x20,0x50,0x53,0x49,0x6e,0x20,0x49,0x4e,0x20,0x29,0x20,0x3a,0x20,0x53,0x56,0x5f,0x54,0x61,0x72,0x67,0x65,0x74,0xd,0xa,0x9,0x9,0x7b,0xd,
0xa,0x9,0x9,0x9,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x49,0x4e,0x2e,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x2a,0x20,0x6c,0x69,0x6e,0x65,0x43,0x6f,0x6c,0x6f,0x72,0x3b,0xd,0xa,0x9,0x9,0x7d,0xd,0xa,0x9,			
		}
	};
	ShaderInstance p_batched_lines::shaderInstances[1];
	
	void p_batched_lines::Initialize()
	{
		p_batched_lines::cb_Data.Create( GetDeviceContext() );
		ShaderInfo d;
		p_batched_lines::GetLoadInfo( d );
		
		p_batched_lines::Load( d, graphics.shaders );
	}
	
	void p_batched_lines::GetLoadInfo( ShaderInfo & outInfo )
	{
		outInfo.source.code = p_batched_lines::Source.data;
		outInfo.source.codeLength = p_batched_lines::Source.size;
		outInfo.uniqueId = p_batched_lines::UID;
		outInfo.name = p_batched_lines::Name;
		outInfo.VS_EntryPoint = p_batched_lines::VS_EntryPoint;
		outInfo.PS_EntryPoint = p_batched_lines::PS_EntryPoint;
		outInfo.numInstances = p_batched_lines::NumInstances;
		outInfo.load = p_batched_lines::Load;
	}
	
	
	void p_batched_lines::Load( const ShaderInfo& shaderInfo, GrShaderSystem* compiler )
	{
		compiler->NewShaderInstance( shaderInfo, shaderInstances[0] );
	}
	
	void p_batched_lines::Shutdown()
	{
		p_batched_lines::cb_Data.Destroy();
		graphics.shaders->Destroy_ShaderInstances( 1, p_batched_lines::shaderInstances );
	}
	const char* p_deferred_fill_buffers_fallback::VS_EntryPoint = "VS_Main";
	const char* p_deferred_fill_buffers_fallback::PS_EntryPoint = "PS_Main";
	const char* p_deferred_fill_buffers_fallback::Name = "p_deferred_fill_buffers_fallback";
	const rxStaticString p_deferred_fill_buffers_fallback::Source =
	{
		2060, // length
		{
0x23,0x6c,0x69,0x6e,0x65,0x20,0x32,0x38,0x20,0x22,0x45,0x3a,0x2f,0x5f,0x2f,0x45,0x6e,0x67,0x69,0x6e,0x65,0x2f,0x44,0x65,0x76,0x65,0x6c,0x6f,0x70,0x6d,0x65,0x6e,0x74,0x2f,0x53,0x6f,0x75,0x72,0x63,0x65,0x43,0x6f,0x64,0x65,0x2f,0x52,0x65,0x6e,0x64,0x65,0x72,0x65,0x72,0x2f,0x47,0x50,0x55,0x2f,0x73,0x6f,0x75,0x72,0x63,0x65,0x2f,0x6d,0x5f,0x67,0x6c,0x6f,0x62,0x61,0x6c,0x73,0x2e,
0x66,0x78,0x22,0xa,0x63,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x50,0x65,0x72,0x46,0x72,0x61,0x6d,0x65,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x62,0x30,0x29,0xa,0x7b,0xa,0x9,0x66,0x6c,0x6f,0x61,0x74,0x31,0x20,0x67,0x6c,0x6f,0x62,0x61,0x6c,0x54,0x69,0x6d,0x65,0x49,0x6e,0x53,0x65,0x63,0x6f,0x6e,0x64,0x73,0x3b,0xa,0x7d,0x3b,0xa,0x23,0x6c,0x69,0x6e,0x65,
0x20,0x33,0x37,0x20,0x22,0x45,0x3a,0x2f,0x5f,0x2f,0x45,0x6e,0x67,0x69,0x6e,0x65,0x2f,0x44,0x65,0x76,0x65,0x6c,0x6f,0x70,0x6d,0x65,0x6e,0x74,0x2f,0x53,0x6f,0x75,0x72,0x63,0x65,0x43,0x6f,0x64,0x65,0x2f,0x52,0x65,0x6e,0x64,0x65,0x72,0x65,0x72,0x2f,0x47,0x50,0x55,0x2f,0x73,0x6f,0x75,0x72,0x63,0x65,0x2f,0x6d,0x5f,0x67,0x6c,0x6f,0x62,0x61,0x6c,0x73,0x2e,0x66,0x78,0x22,0xa,0x53,
0x61,0x6d,0x70,0x6c,0x65,0x72,0x53,0x74,0x61,0x74,0x65,0x20,0x70,0x6f,0x69,0x6e,0x74,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x73,0x30,0x29,0x3b,0xa,0x23,0x6c,0x69,0x6e,0x65,0x20,0x33,0x38,0x20,0x22,0x45,0x3a,0x2f,0x5f,0x2f,0x45,0x6e,0x67,0x69,0x6e,0x65,0x2f,0x44,0x65,0x76,0x65,0x6c,0x6f,0x70,0x6d,0x65,0x6e,0x74,0x2f,
0x53,0x6f,0x75,0x72,0x63,0x65,0x43,0x6f,0x64,0x65,0x2f,0x52,0x65,0x6e,0x64,0x65,0x72,0x65,0x72,0x2f,0x47,0x50,0x55,0x2f,0x73,0x6f,0x75,0x72,0x63,0x65,0x2f,0x6d,0x5f,0x67,0x6c,0x6f,0x62,0x61,0x6c,0x73,0x2e,0x66,0x78,0x22,0xa,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x53,0x74,0x61,0x74,0x65,0x20,0x6c,0x69,0x6e,0x65,0x61,0x72,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x3a,0x20,0x72,
0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x73,0x31,0x29,0x3b,0xa,0x23,0x6c,0x69,0x6e,0x65,0x20,0x33,0x39,0x20,0x22,0x45,0x3a,0x2f,0x5f,0x2f,0x45,0x6e,0x67,0x69,0x6e,0x65,0x2f,0x44,0x65,0x76,0x65,0x6c,0x6f,0x70,0x6d,0x65,0x6e,0x74,0x2f,0x53,0x6f,0x75,0x72,0x63,0x65,0x43,0x6f,0x64,0x65,0x2f,0x52,0x65,0x6e,0x64,0x65,0x72,0x65,0x72,0x2f,0x47,0x50,0x55,0x2f,0x73,0x6f,0x75,0x72,
0x63,0x65,0x2f,0x6d,0x5f,0x67,0x6c,0x6f,0x62,0x61,0x6c,0x73,0x2e,0x66,0x78,0x22,0xa,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x53,0x74,0x61,0x74,0x65,0x20,0x61,0x6e,0x69,0x73,0x6f,0x74,0x72,0x6f,0x70,0x69,0x63,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x73,0x32,0x29,0x3b,0xa,0x23,0x6c,0x69,0x6e,0x65,0x20,0x34,0x31,0x20,0x22,
0x45,0x3a,0x2f,0x5f,0x2f,0x45,0x6e,0x67,0x69,0x6e,0x65,0x2f,0x44,0x65,0x76,0x65,0x6c,0x6f,0x70,0x6d,0x65,0x6e,0x74,0x2f,0x53,0x6f,0x75,0x72,0x63,0x65,0x43,0x6f,0x64,0x65,0x2f,0x52,0x65,0x6e,0x64,0x65,0x72,0x65,0x72,0x2f,0x47,0x50,0x55,0x2f,0x73,0x6f,0x75,0x72,0x63,0x65,0x2f,0x6d,0x5f,0x67,0x6c,0x6f,0x62,0x61,0x6c,0x73,0x2e,0x66,0x78,0x22,0xa,0x53,0x61,0x6d,0x70,0x6c,0x65,
0x72,0x53,0x74,0x61,0x74,0x65,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x4d,0x61,0x70,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x73,0x33,0x29,0x3b,0xa,0x23,0x6c,0x69,0x6e,0x65,0x20,0x34,0x32,0x20,0x22,0x45,0x3a,0x2f,0x5f,0x2f,0x45,0x6e,0x67,0x69,0x6e,0x65,0x2f,0x44,0x65,0x76,0x65,0x6c,0x6f,0x70,0x6d,0x65,0x6e,0x74,0x2f,0x53,0x6f,
0x75,0x72,0x63,0x65,0x43,0x6f,0x64,0x65,0x2f,0x52,0x65,0x6e,0x64,0x65,0x72,0x65,0x72,0x2f,0x47,0x50,0x55,0x2f,0x73,0x6f,0x75,0x72,0x63,0x65,0x2f,0x6d,0x5f,0x67,0x6c,0x6f,0x62,0x61,0x6c,0x73,0x2e,0x66,0x78,0x22,0xa,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x53,0x74,0x61,0x74,0x65,0x20,0x64,0x65,0x74,0x61,0x69,0x6c,0x4d,0x61,0x70,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x3a,0x20,
0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x73,0x34,0x29,0x3b,0xa,0x23,0x6c,0x69,0x6e,0x65,0x20,0x34,0x33,0x20,0x22,0x45,0x3a,0x2f,0x5f,0x2f,0x45,0x6e,0x67,0x69,0x6e,0x65,0x2f,0x44,0x65,0x76,0x65,0x6c,0x6f,0x70,0x6d,0x65,0x6e,0x74,0x2f,0x53,0x6f,0x75,0x72,0x63,0x65,0x43,0x6f,0x64,0x65,0x2f,0x52,0x65,0x6e,0x64,0x65,0x72,0x65,0x72,0x2f,0x47,0x50,0x55,0x2f,0x73,0x6f,0x75,
0x72,0x63,0x65,0x2f,0x6d,0x5f,0x67,0x6c,0x6f,0x62,0x61,0x6c,0x73,0x2e,0x66,0x78,0x22,0xa,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x53,0x74,0x61,0x74,0x65,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x4d,0x61,0x70,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x73,0x35,0x29,0x3b,0xa,0x23,0x6c,0x69,0x6e,0x65,0x20,0x34,0x34,0x20,0x22,0x45,
0x3a,0x2f,0x5f,0x2f,0x45,0x6e,0x67,0x69,0x6e,0x65,0x2f,0x44,0x65,0x76,0x65,0x6c,0x6f,0x70,0x6d,0x65,0x6e,0x74,0x2f,0x53,0x6f,0x75,0x72,0x63,0x65,0x43,0x6f,0x64,0x65,0x2f,0x52,0x65,0x6e,0x64,0x65,0x72,0x65,0x72,0x2f,0x47,0x50,0x55,0x2f,0x73,0x6f,0x75,0x72,0x63,0x65,0x2f,0x6d,0x5f,0x67,0x6c,0x6f,0x62,0x61,0x6c,0x73,0x2e,0x66,0x78,0x22,0xa,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,
0x53,0x74,0x61,0x74,0x65,0x20,0x73,0x70,0x65,0x63,0x75,0x6c,0x61,0x72,0x4d,0x61,0x70,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x73,0x36,0x29,0x3b,0xa,0x23,0x6c,0x69,0x6e,0x65,0x20,0x34,0x35,0x20,0x22,0x45,0x3a,0x2f,0x5f,0x2f,0x45,0x6e,0x67,0x69,0x6e,0x65,0x2f,0x44,0x65,0x76,0x65,0x6c,0x6f,0x70,0x6d,0x65,0x6e,0x74,0x2f,
0x53,0x6f,0x75,0x72,0x63,0x65,0x43,0x6f,0x64,0x65,0x2f,0x52,0x65,0x6e,0x64,0x65,0x72,0x65,0x72,0x2f,0x47,0x50,0x55,0x2f,0x73,0x6f,0x75,0x72,0x63,0x65,0x2f,0x6d,0x5f,0x67,0x6c,0x6f,0x62,0x61,0x6c,0x73,0x2e,0x66,0x78,0x22,0xa,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x53,0x74,0x61,0x74,0x65,0x20,0x61,0x74,0x74,0x65,0x6e,0x75,0x61,0x74,0x69,0x6f,0x6e,0x53,0x61,0x6d,0x70,0x6c,0x65,
0x72,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x73,0x37,0x29,0x3b,0xa,0x23,0x6c,0x69,0x6e,0x65,0x20,0x34,0x36,0x20,0x22,0x45,0x3a,0x2f,0x5f,0x2f,0x45,0x6e,0x67,0x69,0x6e,0x65,0x2f,0x44,0x65,0x76,0x65,0x6c,0x6f,0x70,0x6d,0x65,0x6e,0x74,0x2f,0x53,0x6f,0x75,0x72,0x63,0x65,0x43,0x6f,0x64,0x65,0x2f,0x52,0x65,0x6e,0x64,0x65,0x72,0x65,0x72,0x2f,0x47,0x50,0x55,
0x2f,0x73,0x6f,0x75,0x72,0x63,0x65,0x2f,0x6d,0x5f,0x67,0x6c,0x6f,0x62,0x61,0x6c,0x73,0x2e,0x66,0x78,0x22,0xa,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x53,0x74,0x61,0x74,0x65,0x20,0x63,0x75,0x62,0x65,0x4d,0x61,0x70,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x73,0x38,0x29,0x3b,0xa,0x23,0x6c,0x69,0x6e,0x65,0x20,0x36,0x34,0x20,
0x22,0x45,0x3a,0x2f,0x5f,0x2f,0x45,0x6e,0x67,0x69,0x6e,0x65,0x2f,0x44,0x65,0x76,0x65,0x6c,0x6f,0x70,0x6d,0x65,0x6e,0x74,0x2f,0x53,0x6f,0x75,0x72,0x63,0x65,0x43,0x6f,0x64,0x65,0x2f,0x52,0x65,0x6e,0x64,0x65,0x72,0x65,0x72,0x2f,0x47,0x50,0x55,0x2f,0x73,0x6f,0x75,0x72,0x63,0x65,0x2f,0x6d,0x5f,0x67,0x6c,0x6f,0x62,0x61,0x6c,0x73,0x2e,0x66,0x78,0x22,0xa,0x63,0x62,0x75,0x66,0x66,
0x65,0x72,0x20,0x50,0x65,0x72,0x56,0x69,0x65,0x77,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x62,0x31,0x29,0xa,0x7b,0xa,0x9,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x76,0x69,0x65,0x77,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,0x69,0x6f,0x6e,0x4d,0x61,0x74,0x72,0x69,0x78,0x3b,0xa,0x7d,0x3b,0xa,0x23,0x6c,0x69,0x6e,0x65,0x20,0x39,0x31,0x20,0x22,0x45,0x3a,
0x2f,0x5f,0x2f,0x45,0x6e,0x67,0x69,0x6e,0x65,0x2f,0x44,0x65,0x76,0x65,0x6c,0x6f,0x70,0x6d,0x65,0x6e,0x74,0x2f,0x53,0x6f,0x75,0x72,0x63,0x65,0x43,0x6f,0x64,0x65,0x2f,0x52,0x65,0x6e,0x64,0x65,0x72,0x65,0x72,0x2f,0x47,0x50,0x55,0x2f,0x73,0x6f,0x75,0x72,0x63,0x65,0x2f,0x6d,0x5f,0x67,0x6c,0x6f,0x62,0x61,0x6c,0x73,0x2e,0x66,0x78,0x22,0xa,0x63,0x62,0x75,0x66,0x66,0x65,0x72,0x20,
0x50,0x65,0x72,0x4f,0x62,0x6a,0x65,0x63,0x74,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x62,0x32,0x29,0xa,0x7b,0xa,0x9,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x77,0x6f,0x72,0x6c,0x64,0x4d,0x61,0x74,0x72,0x69,0x78,0x3b,0xa,0x9,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x77,0x6f,0x72,0x6c,0x64,0x56,0x69,0x65,0x77,0x4d,0x61,0x74,0x72,0x69,0x78,
0x3b,0xa,0x9,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x77,0x6f,0x72,0x6c,0x64,0x56,0x69,0x65,0x77,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,0x69,0x6f,0x6e,0x4d,0x61,0x74,0x72,0x69,0x78,0x3b,0xa,0x7d,0x3b,0xa,0xa,0xa,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x30,0x34,0x20,0x22,0x45,0x3a,0x2f,0x5f,0x2f,0x45,0x6e,0x67,0x69,0x6e,0x65,0x2f,0x44,0x65,0x76,0x65,0x6c,0x6f,0x70,0x6d,
0x65,0x6e,0x74,0x2f,0x53,0x6f,0x75,0x72,0x63,0x65,0x43,0x6f,0x64,0x65,0x2f,0x52,0x65,0x6e,0x64,0x65,0x72,0x65,0x72,0x2f,0x47,0x50,0x55,0x2f,0x73,0x6f,0x75,0x72,0x63,0x65,0x2f,0x70,0x5f,0x64,0x65,0x66,0x65,0x72,0x72,0x65,0x64,0x5f,0x66,0x69,0x6c,0x6c,0x5f,0x62,0x75,0x66,0x66,0x65,0x72,0x73,0x2e,0x66,0x78,0x22,0xa,0xd,0xa,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x22,
0x68,0x5f,0x63,0x6f,0x6d,0x6d,0x6f,0x6e,0x5f,0x76,0x65,0x72,0x74,0x65,0x78,0x5f,0x74,0x79,0x70,0x65,0x73,0x2e,0x68,0x6c,0x73,0x6c,0x22,0xd,0xa,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x22,0x67,0x5f,0x62,0x75,0x66,0x66,0x65,0x72,0x2e,0x68,0x6c,0x73,0x6c,0x22,0xd,0xa,0xd,0xa,0x76,0x6f,0x69,0x64,0x20,0x56,0x53,0x5f,0x4d,0x61,0x69,0x6e,0x28,0x20,0x69,0x6e,0x20,0x66,
0x6c,0x6f,0x61,0x74,0x33,0x20,0x78,0x79,0x7a,0x2c,0x20,0x6f,0x75,0x74,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x70,0x6f,0x73,0x48,0x20,0x29,0xd,0xa,0x7b,0xd,0xa,0x9,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x70,0x6f,0x73,0x4c,0x6f,0x63,0x61,0x6c,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x20,0x78,0x79,0x7a,0x2c,0x20,0x31,0x20,0x29,0x3b,0xd,0xa,0xd,0xa,0x9,0x70,
0x6f,0x73,0x48,0x20,0x3d,0x20,0x6d,0x75,0x6c,0x28,0x20,0x70,0x6f,0x73,0x4c,0x6f,0x63,0x61,0x6c,0x2c,0x20,0x77,0x6f,0x72,0x6c,0x64,0x56,0x69,0x65,0x77,0x50,0x72,0x6f,0x6a,0x65,0x63,0x74,0x69,0x6f,0x6e,0x4d,0x61,0x74,0x72,0x69,0x78,0x20,0x29,0x3b,0xd,0xa,0x7d,0xd,0xa,0xd,0xa,0x76,0x6f,0x69,0x64,0x20,0x50,0x53,0x5f,0x4d,0x61,0x69,0x6e,0x28,0x20,0x69,0x6e,0x20,0x66,0x6c,
0x6f,0x61,0x74,0x34,0x20,0x70,0x6f,0x73,0x48,0x2c,0x20,0x6f,0x75,0x74,0x20,0x50,0x53,0x5f,0x4f,0x75,0x74,0x5f,0x47,0x42,0x75,0x66,0x66,0x65,0x72,0x20,0x6f,0x20,0x29,0xd,0xa,0x7b,0xd,0xa,0x9,0x6f,0x2e,0x72,0x74,0x30,0x20,0x3d,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x31,0x2c,0x31,0x2c,0x31,0x2c,0x31,0x29,0x3b,0xd,0xa,0x9,0x6f,0x2e,0x72,0x74,0x31,0x20,0x3d,0x20,0x66,
0x6c,0x6f,0x61,0x74,0x34,0x28,0x31,0x2c,0x31,0x2c,0x31,0x2c,0x31,0x29,0x3b,0xd,0xa,0x9,0x6f,0x2e,0x72,0x74,0x32,0x20,0x3d,0x20,0x31,0x3b,0xd,0xa,0x7d,0xd,0xa,0xd,0xa,			
		}
	};
	ShaderInstance p_deferred_fill_buffers_fallback::shaderInstances[1];
	
	void p_deferred_fill_buffers_fallback::Initialize()
	{
		ShaderInfo d;
		p_deferred_fill_buffers_fallback::GetLoadInfo( d );
		
		p_deferred_fill_buffers_fallback::Load( d, graphics.shaders );
	}
	
	void p_deferred_fill_buffers_fallback::GetLoadInfo( ShaderInfo & outInfo )
	{
		outInfo.source.code = p_deferred_fill_buffers_fallback::Source.data;
		outInfo.source.codeLength = p_deferred_fill_buffers_fallback::Source.size;
		outInfo.uniqueId = p_deferred_fill_buffers_fallback::UID;
		outInfo.name = p_deferred_fill_buffers_fallback::Name;
		outInfo.VS_EntryPoint = p_deferred_fill_buffers_fallback::VS_EntryPoint;
		outInfo.PS_EntryPoint = p_deferred_fill_buffers_fallback::PS_EntryPoint;
		outInfo.numInstances = p_deferred_fill_buffers_fallback::NumInstances;
		outInfo.load = p_deferred_fill_buffers_fallback::Load;
	}
	
	
	void p_deferred_fill_buffers_fallback::Load( const ShaderInfo& shaderInfo, GrShaderSystem* compiler )
	{
		compiler->NewShaderInstance( shaderInfo, shaderInstances[0] );
	}
	
	void p_deferred_fill_buffers_fallback::Shutdown()
	{
		graphics.shaders->Destroy_ShaderInstances( 1, p_deferred_fill_buffers_fallback::shaderInstances );
	}
	TypedConstantBuffer< p_fullscreen_colored_triangle_shader::Data >	p_fullscreen_colored_triangle_shader::cb_Data;
	const char* p_fullscreen_colored_triangle_shader::VS_EntryPoint = "FullScreenTriangle_VS";
	const char* p_fullscreen_colored_triangle_shader::PS_EntryPoint = "PS_Main";
	const char* p_fullscreen_colored_triangle_shader::Name = "p_fullscreen_colored_triangle_shader";
	const rxStaticString p_fullscreen_colored_triangle_shader::Source =
	{
		348, // length
		{
0xa,0x23,0x6c,0x69,0x6e,0x65,0x20,0x33,0x31,0x20,0x22,0x45,0x3a,0x2f,0x5f,0x2f,0x45,0x6e,0x67,0x69,0x6e,0x65,0x2f,0x44,0x65,0x76,0x65,0x6c,0x6f,0x70,0x6d,0x65,0x6e,0x74,0x2f,0x53,0x6f,0x75,0x72,0x63,0x65,0x43,0x6f,0x64,0x65,0x2f,0x52,0x65,0x6e,0x64,0x65,0x72,0x65,0x72,0x2f,0x47,0x50,0x55,0x2f,0x73,0x6f,0x75,0x72,0x63,0x65,0x2f,0x70,0x5f,0x73,0x63,0x72,0x65,0x65,0x6e,0x5f,
0x73,0x68,0x61,0x64,0x65,0x72,0x2e,0x66,0x78,0x22,0xa,0x63,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x44,0x61,0x74,0x61,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x62,0x30,0x29,0xa,0x7b,0xa,0x9,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0xa,0x7d,0x3b,0xa,0xa,0x23,0x6c,0x69,0x6e,0x65,0x20,0x33,0x37,0x20,0x22,0x45,0x3a,0x2f,0x5f,0x2f,
0x45,0x6e,0x67,0x69,0x6e,0x65,0x2f,0x44,0x65,0x76,0x65,0x6c,0x6f,0x70,0x6d,0x65,0x6e,0x74,0x2f,0x53,0x6f,0x75,0x72,0x63,0x65,0x43,0x6f,0x64,0x65,0x2f,0x52,0x65,0x6e,0x64,0x65,0x72,0x65,0x72,0x2f,0x47,0x50,0x55,0x2f,0x73,0x6f,0x75,0x72,0x63,0x65,0x2f,0x70,0x5f,0x73,0x63,0x72,0x65,0x65,0x6e,0x5f,0x73,0x68,0x61,0x64,0x65,0x72,0x2e,0x66,0x78,0x22,0xa,0xd,0xa,0x9,0x9,0x23,
0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x22,0x68,0x5f,0x73,0x63,0x72,0x65,0x65,0x6e,0x5f,0x73,0x68,0x61,0x64,0x65,0x72,0x2e,0x68,0x6c,0x73,0x6c,0x22,0xd,0xa,0x9,0x9,0xd,0xa,0x9,0x9,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x50,0x53,0x5f,0x4d,0x61,0x69,0x6e,0x28,0x20,0x69,0x6e,0x20,0x56,0x53,0x5f,0x53,0x63,0x72,0x65,0x65,0x6e,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x69,0x6e,
0x70,0x75,0x74,0x20,0x29,0x20,0x3a,0x20,0x53,0x56,0x5f,0x54,0x61,0x72,0x67,0x65,0x74,0xd,0xa,0x9,0x9,0x7b,0xd,0xa,0x9,0x9,0x9,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0xd,0xa,0x9,0x9,0x7d,0xd,0xa,0x9,			
		}
	};
	ShaderInstance p_fullscreen_colored_triangle_shader::shaderInstances[1];
	
	void p_fullscreen_colored_triangle_shader::Initialize()
	{
		p_fullscreen_colored_triangle_shader::cb_Data.Create( GetDeviceContext() );
		ShaderInfo d;
		p_fullscreen_colored_triangle_shader::GetLoadInfo( d );
		
		p_fullscreen_colored_triangle_shader::Load( d, graphics.shaders );
	}
	
	void p_fullscreen_colored_triangle_shader::GetLoadInfo( ShaderInfo & outInfo )
	{
		outInfo.source.code = p_fullscreen_colored_triangle_shader::Source.data;
		outInfo.source.codeLength = p_fullscreen_colored_triangle_shader::Source.size;
		outInfo.uniqueId = p_fullscreen_colored_triangle_shader::UID;
		outInfo.name = p_fullscreen_colored_triangle_shader::Name;
		outInfo.VS_EntryPoint = p_fullscreen_colored_triangle_shader::VS_EntryPoint;
		outInfo.PS_EntryPoint = p_fullscreen_colored_triangle_shader::PS_EntryPoint;
		outInfo.numInstances = p_fullscreen_colored_triangle_shader::NumInstances;
		outInfo.load = p_fullscreen_colored_triangle_shader::Load;
	}
	
	
	void p_fullscreen_colored_triangle_shader::Load( const ShaderInfo& shaderInfo, GrShaderSystem* compiler )
	{
		compiler->NewShaderInstance( shaderInfo, shaderInstances[0] );
	}
	
	void p_fullscreen_colored_triangle_shader::Shutdown()
	{
		p_fullscreen_colored_triangle_shader::cb_Data.Destroy();
		graphics.shaders->Destroy_ShaderInstances( 1, p_fullscreen_colored_triangle_shader::shaderInstances );
	}
	ID3D11SamplerState* p_fullscreen_textured_triangle_shader::linearSampler = nil;
	ID3D11ShaderResourceView* p_fullscreen_textured_triangle_shader::sourceTexture = nil;
	const char* p_fullscreen_textured_triangle_shader::VS_EntryPoint = "FullScreenTriangle_VS";
	const char* p_fullscreen_textured_triangle_shader::PS_EntryPoint = "PS_Main";
	const char* p_fullscreen_textured_triangle_shader::Name = "p_fullscreen_textured_triangle_shader";
	const rxStaticString p_fullscreen_textured_triangle_shader::Source =
	{
		579, // length
		{
0xa,0x23,0x6c,0x69,0x6e,0x65,0x20,0x35,0x20,0x22,0x45,0x3a,0x2f,0x5f,0x2f,0x45,0x6e,0x67,0x69,0x6e,0x65,0x2f,0x44,0x65,0x76,0x65,0x6c,0x6f,0x70,0x6d,0x65,0x6e,0x74,0x2f,0x53,0x6f,0x75,0x72,0x63,0x65,0x43,0x6f,0x64,0x65,0x2f,0x52,0x65,0x6e,0x64,0x65,0x72,0x65,0x72,0x2f,0x47,0x50,0x55,0x2f,0x73,0x6f,0x75,0x72,0x63,0x65,0x2f,0x70,0x5f,0x73,0x63,0x72,0x65,0x65,0x6e,0x5f,0x73,
0x68,0x61,0x64,0x65,0x72,0x2e,0x66,0x78,0x22,0xa,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x53,0x74,0x61,0x74,0x65,0x20,0x6c,0x69,0x6e,0x65,0x61,0x72,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x73,0x30,0x29,0x3b,0xa,0x23,0x6c,0x69,0x6e,0x65,0x20,0x36,0x20,0x22,0x45,0x3a,0x2f,0x5f,0x2f,0x45,0x6e,0x67,0x69,0x6e,0x65,0x2f,0x44,
0x65,0x76,0x65,0x6c,0x6f,0x70,0x6d,0x65,0x6e,0x74,0x2f,0x53,0x6f,0x75,0x72,0x63,0x65,0x43,0x6f,0x64,0x65,0x2f,0x52,0x65,0x6e,0x64,0x65,0x72,0x65,0x72,0x2f,0x47,0x50,0x55,0x2f,0x73,0x6f,0x75,0x72,0x63,0x65,0x2f,0x70,0x5f,0x73,0x63,0x72,0x65,0x65,0x6e,0x5f,0x73,0x68,0x61,0x64,0x65,0x72,0x2e,0x66,0x78,0x22,0xa,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x44,0x20,0x73,0x6f,0x75,
0x72,0x63,0x65,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x74,0x30,0x29,0x3b,0xa,0xa,0x23,0x6c,0x69,0x6e,0x65,0x20,0x39,0x20,0x22,0x45,0x3a,0x2f,0x5f,0x2f,0x45,0x6e,0x67,0x69,0x6e,0x65,0x2f,0x44,0x65,0x76,0x65,0x6c,0x6f,0x70,0x6d,0x65,0x6e,0x74,0x2f,0x53,0x6f,0x75,0x72,0x63,0x65,0x43,0x6f,0x64,0x65,0x2f,0x52,0x65,0x6e,
0x64,0x65,0x72,0x65,0x72,0x2f,0x47,0x50,0x55,0x2f,0x73,0x6f,0x75,0x72,0x63,0x65,0x2f,0x70,0x5f,0x73,0x63,0x72,0x65,0x65,0x6e,0x5f,0x73,0x68,0x61,0x64,0x65,0x72,0x2e,0x66,0x78,0x22,0xa,0xd,0xa,0x9,0x9,0x23,0x69,0x6e,0x63,0x6c,0x75,0x64,0x65,0x20,0x22,0x68,0x5f,0x73,0x63,0x72,0x65,0x65,0x6e,0x5f,0x73,0x68,0x61,0x64,0x65,0x72,0x2e,0x68,0x6c,0x73,0x6c,0x22,0xd,0xa,0x9,
0x9,0xd,0xa,0x9,0x9,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x50,0x53,0x5f,0x4d,0x61,0x69,0x6e,0x28,0x20,0x69,0x6e,0x20,0x56,0x53,0x5f,0x53,0x63,0x72,0x65,0x65,0x6e,0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x69,0x6e,0x70,0x75,0x74,0x20,0x29,0x20,0x3a,0x20,0x53,0x56,0x5f,0x54,0x61,0x72,0x67,0x65,0x74,0xd,0xa,0x9,0x9,0x7b,0xd,0xa,0x9,0x9,0x9,0x66,0x6c,0x6f,0x61,0x74,0x33,
0x20,0x6f,0x75,0x74,0x70,0x75,0x74,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x30,0x2e,0x30,0x66,0x3b,0xd,0xa,0x9,0x9,0x9,0x6f,0x75,0x74,0x70,0x75,0x74,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x73,0x6f,0x75,0x72,0x63,0x65,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,0x28,0x20,0x6c,0x69,0x6e,0x65,0x61,0x72,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,
0x20,0x69,0x6e,0x70,0x75,0x74,0x2e,0x74,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x20,0x29,0x2e,0x72,0x67,0x62,0x3b,0xd,0xa,0x9,0x9,0x9,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,0x70,0x75,0x74,0x43,0x6f,0x6c,0x6f,0x72,0x3b,0xd,0xa,0x9,0x9,0x7d,0xd,0xa,0x9,			
		}
	};
	ShaderInstance p_fullscreen_textured_triangle_shader::shaderInstances[1];
	
	void p_fullscreen_textured_triangle_shader::Initialize()
	{
		ShaderInfo d;
		p_fullscreen_textured_triangle_shader::GetLoadInfo( d );
		
		p_fullscreen_textured_triangle_shader::Load( d, graphics.shaders );
	}
	
	void p_fullscreen_textured_triangle_shader::GetLoadInfo( ShaderInfo & outInfo )
	{
		outInfo.source.code = p_fullscreen_textured_triangle_shader::Source.data;
		outInfo.source.codeLength = p_fullscreen_textured_triangle_shader::Source.size;
		outInfo.uniqueId = p_fullscreen_textured_triangle_shader::UID;
		outInfo.name = p_fullscreen_textured_triangle_shader::Name;
		outInfo.VS_EntryPoint = p_fullscreen_textured_triangle_shader::VS_EntryPoint;
		outInfo.PS_EntryPoint = p_fullscreen_textured_triangle_shader::PS_EntryPoint;
		outInfo.numInstances = p_fullscreen_textured_triangle_shader::NumInstances;
		outInfo.load = p_fullscreen_textured_triangle_shader::Load;
	}
	
	extern SamplerState samplerState_SS_Bilinear;
	
	void p_fullscreen_textured_triangle_shader::Load( const ShaderInfo& shaderInfo, GrShaderSystem* compiler )
	{
		p_fullscreen_textured_triangle_shader::linearSampler = samplerState_SS_Bilinear.p.Ptr;
		compiler->NewShaderInstance( shaderInfo, shaderInstances[0] );
	}
	
	void p_fullscreen_textured_triangle_shader::Shutdown()
	{
		graphics.shaders->Destroy_ShaderInstances( 1, p_fullscreen_textured_triangle_shader::shaderInstances );
	}
	TypedConstantBuffer< p_test_shader::Data >	p_test_shader::cb_Data;
	ID3D11ShaderResourceView* p_test_shader::diffuseTexture = nil;
	const char* p_test_shader::VS_EntryPoint = "VS_Main";
	const char* p_test_shader::PS_EntryPoint = "PS_Main";
	const char* p_test_shader::Name = "p_test_shader";
	const rxStaticString p_test_shader::Source =
	{
		2175, // length
		{
0x23,0x6c,0x69,0x6e,0x65,0x20,0x32,0x38,0x20,0x22,0x45,0x3a,0x2f,0x5f,0x2f,0x45,0x6e,0x67,0x69,0x6e,0x65,0x2f,0x44,0x65,0x76,0x65,0x6c,0x6f,0x70,0x6d,0x65,0x6e,0x74,0x2f,0x53,0x6f,0x75,0x72,0x63,0x65,0x43,0x6f,0x64,0x65,0x2f,0x52,0x65,0x6e,0x64,0x65,0x72,0x65,0x72,0x2f,0x47,0x50,0x55,0x2f,0x73,0x6f,0x75,0x72,0x63,0x65,0x2f,0x6d,0x5f,0x67,0x6c,0x6f,0x62,0x61,0x6c,0x73,0x2e,
0x66,0x78,0x22,0xa,0x63,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x50,0x65,0x72,0x46,0x72,0x61,0x6d,0x65,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x62,0x30,0x29,0xa,0x7b,0xa,0x9,0x66,0x6c,0x6f,0x61,0x74,0x31,0x20,0x67,0x6c,0x6f,0x62,0x61,0x6c,0x54,0x69,0x6d,0x65,0x49,0x6e,0x53,0x65,0x63,0x6f,0x6e,0x64,0x73,0x3b,0xa,0x7d,0x3b,0xa,0x23,0x6c,0x69,0x6e,0x65,
0x20,0x33,0x37,0x20,0x22,0x45,0x3a,0x2f,0x5f,0x2f,0x45,0x6e,0x67,0x69,0x6e,0x65,0x2f,0x44,0x65,0x76,0x65,0x6c,0x6f,0x70,0x6d,0x65,0x6e,0x74,0x2f,0x53,0x6f,0x75,0x72,0x63,0x65,0x43,0x6f,0x64,0x65,0x2f,0x52,0x65,0x6e,0x64,0x65,0x72,0x65,0x72,0x2f,0x47,0x50,0x55,0x2f,0x73,0x6f,0x75,0x72,0x63,0x65,0x2f,0x6d,0x5f,0x67,0x6c,0x6f,0x62,0x61,0x6c,0x73,0x2e,0x66,0x78,0x22,0xa,0x53,
0x61,0x6d,0x70,0x6c,0x65,0x72,0x53,0x74,0x61,0x74,0x65,0x20,0x70,0x6f,0x69,0x6e,0x74,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x73,0x30,0x29,0x3b,0xa,0x23,0x6c,0x69,0x6e,0x65,0x20,0x33,0x38,0x20,0x22,0x45,0x3a,0x2f,0x5f,0x2f,0x45,0x6e,0x67,0x69,0x6e,0x65,0x2f,0x44,0x65,0x76,0x65,0x6c,0x6f,0x70,0x6d,0x65,0x6e,0x74,0x2f,
0x53,0x6f,0x75,0x72,0x63,0x65,0x43,0x6f,0x64,0x65,0x2f,0x52,0x65,0x6e,0x64,0x65,0x72,0x65,0x72,0x2f,0x47,0x50,0x55,0x2f,0x73,0x6f,0x75,0x72,0x63,0x65,0x2f,0x6d,0x5f,0x67,0x6c,0x6f,0x62,0x61,0x6c,0x73,0x2e,0x66,0x78,0x22,0xa,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x53,0x74,0x61,0x74,0x65,0x20,0x6c,0x69,0x6e,0x65,0x61,0x72,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x3a,0x20,0x72,
0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x73,0x31,0x29,0x3b,0xa,0x23,0x6c,0x69,0x6e,0x65,0x20,0x33,0x39,0x20,0x22,0x45,0x3a,0x2f,0x5f,0x2f,0x45,0x6e,0x67,0x69,0x6e,0x65,0x2f,0x44,0x65,0x76,0x65,0x6c,0x6f,0x70,0x6d,0x65,0x6e,0x74,0x2f,0x53,0x6f,0x75,0x72,0x63,0x65,0x43,0x6f,0x64,0x65,0x2f,0x52,0x65,0x6e,0x64,0x65,0x72,0x65,0x72,0x2f,0x47,0x50,0x55,0x2f,0x73,0x6f,0x75,0x72,
0x63,0x65,0x2f,0x6d,0x5f,0x67,0x6c,0x6f,0x62,0x61,0x6c,0x73,0x2e,0x66,0x78,0x22,0xa,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x53,0x74,0x61,0x74,0x65,0x20,0x61,0x6e,0x69,0x73,0x6f,0x74,0x72,0x6f,0x70,0x69,0x63,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x73,0x32,0x29,0x3b,0xa,0x23,0x6c,0x69,0x6e,0x65,0x20,0x34,0x31,0x20,0x22,
0x45,0x3a,0x2f,0x5f,0x2f,0x45,0x6e,0x67,0x69,0x6e,0x65,0x2f,0x44,0x65,0x76,0x65,0x6c,0x6f,0x70,0x6d,0x65,0x6e,0x74,0x2f,0x53,0x6f,0x75,0x72,0x63,0x65,0x43,0x6f,0x64,0x65,0x2f,0x52,0x65,0x6e,0x64,0x65,0x72,0x65,0x72,0x2f,0x47,0x50,0x55,0x2f,0x73,0x6f,0x75,0x72,0x63,0x65,0x2f,0x6d,0x5f,0x67,0x6c,0x6f,0x62,0x61,0x6c,0x73,0x2e,0x66,0x78,0x22,0xa,0x53,0x61,0x6d,0x70,0x6c,0x65,
0x72,0x53,0x74,0x61,0x74,0x65,0x20,0x63,0x6f,0x6c,0x6f,0x72,0x4d,0x61,0x70,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x73,0x33,0x29,0x3b,0xa,0x23,0x6c,0x69,0x6e,0x65,0x20,0x34,0x32,0x20,0x22,0x45,0x3a,0x2f,0x5f,0x2f,0x45,0x6e,0x67,0x69,0x6e,0x65,0x2f,0x44,0x65,0x76,0x65,0x6c,0x6f,0x70,0x6d,0x65,0x6e,0x74,0x2f,0x53,0x6f,
0x75,0x72,0x63,0x65,0x43,0x6f,0x64,0x65,0x2f,0x52,0x65,0x6e,0x64,0x65,0x72,0x65,0x72,0x2f,0x47,0x50,0x55,0x2f,0x73,0x6f,0x75,0x72,0x63,0x65,0x2f,0x6d,0x5f,0x67,0x6c,0x6f,0x62,0x61,0x6c,0x73,0x2e,0x66,0x78,0x22,0xa,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x53,0x74,0x61,0x74,0x65,0x20,0x64,0x65,0x74,0x61,0x69,0x6c,0x4d,0x61,0x70,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x3a,0x20,
0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x73,0x34,0x29,0x3b,0xa,0x23,0x6c,0x69,0x6e,0x65,0x20,0x34,0x33,0x20,0x22,0x45,0x3a,0x2f,0x5f,0x2f,0x45,0x6e,0x67,0x69,0x6e,0x65,0x2f,0x44,0x65,0x76,0x65,0x6c,0x6f,0x70,0x6d,0x65,0x6e,0x74,0x2f,0x53,0x6f,0x75,0x72,0x63,0x65,0x43,0x6f,0x64,0x65,0x2f,0x52,0x65,0x6e,0x64,0x65,0x72,0x65,0x72,0x2f,0x47,0x50,0x55,0x2f,0x73,0x6f,0x75,
0x72,0x63,0x65,0x2f,0x6d,0x5f,0x67,0x6c,0x6f,0x62,0x61,0x6c,0x73,0x2e,0x66,0x78,0x22,0xa,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x53,0x74,0x61,0x74,0x65,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x4d,0x61,0x70,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x73,0x35,0x29,0x3b,0xa,0x23,0x6c,0x69,0x6e,0x65,0x20,0x34,0x34,0x20,0x22,0x45,
0x3a,0x2f,0x5f,0x2f,0x45,0x6e,0x67,0x69,0x6e,0x65,0x2f,0x44,0x65,0x76,0x65,0x6c,0x6f,0x70,0x6d,0x65,0x6e,0x74,0x2f,0x53,0x6f,0x75,0x72,0x63,0x65,0x43,0x6f,0x64,0x65,0x2f,0x52,0x65,0x6e,0x64,0x65,0x72,0x65,0x72,0x2f,0x47,0x50,0x55,0x2f,0x73,0x6f,0x75,0x72,0x63,0x65,0x2f,0x6d,0x5f,0x67,0x6c,0x6f,0x62,0x61,0x6c,0x73,0x2e,0x66,0x78,0x22,0xa,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,
0x53,0x74,0x61,0x74,0x65,0x20,0x73,0x70,0x65,0x63,0x75,0x6c,0x61,0x72,0x4d,0x61,0x70,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x73,0x36,0x29,0x3b,0xa,0x23,0x6c,0x69,0x6e,0x65,0x20,0x34,0x35,0x20,0x22,0x45,0x3a,0x2f,0x5f,0x2f,0x45,0x6e,0x67,0x69,0x6e,0x65,0x2f,0x44,0x65,0x76,0x65,0x6c,0x6f,0x70,0x6d,0x65,0x6e,0x74,0x2f,
0x53,0x6f,0x75,0x72,0x63,0x65,0x43,0x6f,0x64,0x65,0x2f,0x52,0x65,0x6e,0x64,0x65,0x72,0x65,0x72,0x2f,0x47,0x50,0x55,0x2f,0x73,0x6f,0x75,0x72,0x63,0x65,0x2f,0x6d,0x5f,0x67,0x6c,0x6f,0x62,0x61,0x6c,0x73,0x2e,0x66,0x78,0x22,0xa,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x53,0x74,0x61,0x74,0x65,0x20,0x61,0x74,0x74,0x65,0x6e,0x75,0x61,0x74,0x69,0x6f,0x6e,0x53,0x61,0x6d,0x70,0x6c,0x65,
0x72,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x73,0x37,0x29,0x3b,0xa,0x23,0x6c,0x69,0x6e,0x65,0x20,0x34,0x36,0x20,0x22,0x45,0x3a,0x2f,0x5f,0x2f,0x45,0x6e,0x67,0x69,0x6e,0x65,0x2f,0x44,0x65,0x76,0x65,0x6c,0x6f,0x70,0x6d,0x65,0x6e,0x74,0x2f,0x53,0x6f,0x75,0x72,0x63,0x65,0x43,0x6f,0x64,0x65,0x2f,0x52,0x65,0x6e,0x64,0x65,0x72,0x65,0x72,0x2f,0x47,0x50,0x55,
0x2f,0x73,0x6f,0x75,0x72,0x63,0x65,0x2f,0x6d,0x5f,0x67,0x6c,0x6f,0x62,0x61,0x6c,0x73,0x2e,0x66,0x78,0x22,0xa,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x53,0x74,0x61,0x74,0x65,0x20,0x63,0x75,0x62,0x65,0x4d,0x61,0x70,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x73,0x38,0x29,0x3b,0xa,0xa,0x23,0x6c,0x69,0x6e,0x65,0x20,0x35,0x20,
0x22,0x45,0x3a,0x2f,0x5f,0x2f,0x45,0x6e,0x67,0x69,0x6e,0x65,0x2f,0x44,0x65,0x76,0x65,0x6c,0x6f,0x70,0x6d,0x65,0x6e,0x74,0x2f,0x53,0x6f,0x75,0x72,0x63,0x65,0x43,0x6f,0x64,0x65,0x2f,0x52,0x65,0x6e,0x64,0x65,0x72,0x65,0x72,0x2f,0x47,0x50,0x55,0x2f,0x73,0x6f,0x75,0x72,0x63,0x65,0x2f,0x70,0x5f,0x74,0x65,0x73,0x74,0x5f,0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2e,0x66,0x78,0x22,0xa,
0x63,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x44,0x61,0x74,0x61,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x62,0x31,0x29,0xa,0x7b,0xa,0x9,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x77,0x76,0x70,0x3b,0xa,0x7d,0x3b,0xa,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x30,0x20,0x22,0x45,0x3a,0x2f,0x5f,0x2f,0x45,0x6e,0x67,0x69,0x6e,0x65,0x2f,0x44,0x65,0x76,0x65,0x6c,
0x6f,0x70,0x6d,0x65,0x6e,0x74,0x2f,0x53,0x6f,0x75,0x72,0x63,0x65,0x43,0x6f,0x64,0x65,0x2f,0x52,0x65,0x6e,0x64,0x65,0x72,0x65,0x72,0x2f,0x47,0x50,0x55,0x2f,0x73,0x6f,0x75,0x72,0x63,0x65,0x2f,0x70,0x5f,0x74,0x65,0x73,0x74,0x5f,0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2e,0x66,0x78,0x22,0xa,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x44,0x20,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x54,
0x65,0x78,0x74,0x75,0x72,0x65,0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x74,0x30,0x29,0x3b,0xa,0xa,0x23,0x6c,0x69,0x6e,0x65,0x20,0x31,0x33,0x20,0x22,0x45,0x3a,0x2f,0x5f,0x2f,0x45,0x6e,0x67,0x69,0x6e,0x65,0x2f,0x44,0x65,0x76,0x65,0x6c,0x6f,0x70,0x6d,0x65,0x6e,0x74,0x2f,0x53,0x6f,0x75,0x72,0x63,0x65,0x43,0x6f,0x64,0x65,0x2f,0x52,0x65,0x6e,0x64,0x65,0x72,
0x65,0x72,0x2f,0x47,0x50,0x55,0x2f,0x73,0x6f,0x75,0x72,0x63,0x65,0x2f,0x70,0x5f,0x74,0x65,0x73,0x74,0x5f,0x73,0x68,0x61,0x64,0x65,0x72,0x73,0x2e,0x66,0x78,0x22,0xa,0xd,0xa,0x9,0x9,0xd,0xa,0x9,0x9,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x61,0x70,0x70,0x54,0x6f,0x56,0x53,0xd,0xa,0x9,0x9,0x7b,0xd,0xa,0x9,0x9,0x9,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x78,0x79,0x7a,
0x20,0x3a,0x20,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0xd,0xa,0x9,0x9,0x9,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x75,0x76,0x20,0x3a,0x20,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x3b,0xd,0xa,0x9,0x9,0x9,0x2f,0x2f,0x75,0x69,0x6e,0x74,0x34,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x20,0x3a,0x20,0x4e,0x6f,0x72,0x6d,0x61,0x6c,0x3b,0xd,0xa,0x9,0x9,0x9,0x2f,0x2f,0x75,
0x69,0x6e,0x74,0x34,0x20,0x74,0x61,0x6e,0x67,0x65,0x6e,0x74,0x20,0x3a,0x20,0x54,0x61,0x6e,0x67,0x65,0x6e,0x74,0x3b,0xd,0xa,0x9,0x9,0x7d,0x3b,0xd,0xa,0xd,0xa,0x9,0x9,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x56,0x53,0x5f,0x74,0x6f,0x5f,0x50,0x53,0xd,0xa,0x9,0x9,0x7b,0xd,0xa,0x9,0x9,0x9,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x68,0x50,0x6f,0x73,0x20,0x3a,0x20,0x53,
0x56,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0xd,0xa,0x9,0x9,0x9,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x74,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x20,0x3a,0x20,0x54,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x3b,0xd,0xa,0x9,0x9,0x7d,0x3b,0xd,0xa,0x9,0x9,0x76,0x6f,0x69,0x64,0x20,0x56,0x53,0x5f,0x4d,0x61,0x69,0x6e,0x28,0x20,0x69,0x6e,0x20,0x61,0x70,0x70,0x54,0x6f,
0x56,0x53,0x20,0x49,0x4e,0x2c,0x20,0x6f,0x75,0x74,0x20,0x56,0x53,0x5f,0x74,0x6f,0x5f,0x50,0x53,0x20,0x4f,0x55,0x54,0x20,0x29,0xd,0xa,0x9,0x9,0x7b,0xd,0xa,0x9,0x9,0x9,0x4f,0x55,0x54,0x2e,0x68,0x50,0x6f,0x73,0x20,0x3d,0x20,0x6d,0x75,0x6c,0x28,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x49,0x4e,0x2e,0x78,0x79,0x7a,0x2c,0x31,0x29,0x2c,0x77,0x76,0x70,0x29,0x3b,0xd,0xa,0x9,
0x9,0x9,0x4f,0x55,0x54,0x2e,0x74,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x20,0x3d,0x20,0x49,0x4e,0x2e,0x75,0x76,0x3b,0xd,0xa,0x9,0x9,0x7d,0xd,0xa,0x9,0x9,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x50,0x53,0x5f,0x4d,0x61,0x69,0x6e,0x28,0x20,0x69,0x6e,0x20,0x56,0x53,0x5f,0x74,0x6f,0x5f,0x50,0x53,0x20,0x69,0x6e,0x70,0x75,0x74,0x20,0x29,0x20,0x3a,0x20,0x53,0x56,0x5f,0x54,0x61,
0x72,0x67,0x65,0x74,0xd,0xa,0x9,0x9,0x7b,0xd,0xa,0x9,0x9,0x9,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x6f,0x75,0x74,0x70,0x75,0x74,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x30,0x2e,0x30,0x66,0x3b,0xd,0xa,0x9,0x9,0x9,0x6f,0x75,0x74,0x70,0x75,0x74,0x43,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x2e,0x53,
0x61,0x6d,0x70,0x6c,0x65,0x28,0x20,0x6c,0x69,0x6e,0x65,0x61,0x72,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x69,0x6e,0x70,0x75,0x74,0x2e,0x74,0x65,0x78,0x43,0x6f,0x6f,0x72,0x64,0x20,0x29,0x2e,0x72,0x67,0x62,0x3b,0xd,0xa,0x9,0x9,0x9,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x6f,0x75,0x74,0x70,0x75,0x74,0x43,0x6f,0x6c,0x6f,0x72,0x3b,0xd,0xa,0x9,0x9,0x7d,0xd,0xa,0x9,
			
		}
	};
	ShaderInstance p_test_shader::shaderInstances[1];
	
	void p_test_shader::Initialize()
	{
		p_test_shader::cb_Data.Create( GetDeviceContext() );
		ShaderInfo d;
		p_test_shader::GetLoadInfo( d );
		
		p_test_shader::Load( d, graphics.shaders );
	}
	
	void p_test_shader::GetLoadInfo( ShaderInfo & outInfo )
	{
		outInfo.source.code = p_test_shader::Source.data;
		outInfo.source.codeLength = p_test_shader::Source.size;
		outInfo.uniqueId = p_test_shader::UID;
		outInfo.name = p_test_shader::Name;
		outInfo.VS_EntryPoint = p_test_shader::VS_EntryPoint;
		outInfo.PS_EntryPoint = p_test_shader::PS_EntryPoint;
		outInfo.numInstances = p_test_shader::NumInstances;
		outInfo.load = p_test_shader::Load;
	}
	
	
	void p_test_shader::Load( const ShaderInfo& shaderInfo, GrShaderSystem* compiler )
	{
		compiler->NewShaderInstance( shaderInfo, shaderInstances[0] );
	}
	
	void p_test_shader::Shutdown()
	{
		p_test_shader::cb_Data.Destroy();
		graphics.shaders->Destroy_ShaderInstances( 1, p_test_shader::shaderInstances );
	}
	InputLayout Vertex_P3F::layout;
	InputLayout Vertex_P3F_TEX2F::layout;
	InputLayout Vertex_P3F_TEX2F_N4UB::layout;
	InputLayout Vertex_P3F_TEX2F_N4UB_T4UB::layout;
	InputLayout Vertex_P4F_COL4F::layout;
	
	static void CreateInputLayouts()
	{
		{
			dxVertexFormat	vtxFormat;
			{
				D3D11_INPUT_ELEMENT_DESC & elemDesc = vtxFormat.elements.Add();
				elemDesc.SemanticName = "Position";
				elemDesc.SemanticIndex = 0;
				elemDesc.Format = DXGI_FORMAT_R32G32B32_FLOAT;
				elemDesc.InputSlot = 0;
				elemDesc.AlignedByteOffset = D3D11_APPEND_ALIGNED_ELEMENT;
				elemDesc.InputSlotClass = D3D11_INPUT_PER_VERTEX_DATA;
				elemDesc.InstanceDataStepRate = 0;
			}
			graphics.resources->Create_InputLayout( vtxFormat.elements.ToPtr(), vtxFormat.elements.Num(), Vertex_P3F::layout );
			dxDbgSetName( Vertex_P3F::layout.p, "Vertex_P3F" );
		}
		
		{
			dxVertexFormat	vtxFormat;
			{
				D3D11_INPUT_ELEMENT_DESC & elemDesc = vtxFormat.elements.Add();
				elemDesc.SemanticName = "Position";
				elemDesc.SemanticIndex = 0;
				elemDesc.Format = DXGI_FORMAT_R32G32B32_FLOAT;
				elemDesc.InputSlot = 0;
				elemDesc.AlignedByteOffset = D3D11_APPEND_ALIGNED_ELEMENT;
				elemDesc.InputSlotClass = D3D11_INPUT_PER_VERTEX_DATA;
				elemDesc.InstanceDataStepRate = 0;
			}
			{
				D3D11_INPUT_ELEMENT_DESC & elemDesc = vtxFormat.elements.Add();
				elemDesc.SemanticName = "TexCoord";
				elemDesc.SemanticIndex = 0;
				elemDesc.Format = DXGI_FORMAT_R32G32_FLOAT;
				elemDesc.InputSlot = 0;
				elemDesc.AlignedByteOffset = D3D11_APPEND_ALIGNED_ELEMENT;
				elemDesc.InputSlotClass = D3D11_INPUT_PER_VERTEX_DATA;
				elemDesc.InstanceDataStepRate = 0;
			}
			graphics.resources->Create_InputLayout( vtxFormat.elements.ToPtr(), vtxFormat.elements.Num(), Vertex_P3F_TEX2F::layout );
			dxDbgSetName( Vertex_P3F_TEX2F::layout.p, "Vertex_P3F_TEX2F" );
		}
		
		{
			dxVertexFormat	vtxFormat;
			{
				D3D11_INPUT_ELEMENT_DESC & elemDesc = vtxFormat.elements.Add();
				elemDesc.SemanticName = "Position";
				elemDesc.SemanticIndex = 0;
				elemDesc.Format = DXGI_FORMAT_R32G32B32_FLOAT;
				elemDesc.InputSlot = 0;
				elemDesc.AlignedByteOffset = D3D11_APPEND_ALIGNED_ELEMENT;
				elemDesc.InputSlotClass = D3D11_INPUT_PER_VERTEX_DATA;
				elemDesc.InstanceDataStepRate = 0;
			}
			{
				D3D11_INPUT_ELEMENT_DESC & elemDesc = vtxFormat.elements.Add();
				elemDesc.SemanticName = "TexCoord";
				elemDesc.SemanticIndex = 0;
				elemDesc.Format = DXGI_FORMAT_R32G32_FLOAT;
				elemDesc.InputSlot = 0;
				elemDesc.AlignedByteOffset = D3D11_APPEND_ALIGNED_ELEMENT;
				elemDesc.InputSlotClass = D3D11_INPUT_PER_VERTEX_DATA;
				elemDesc.InstanceDataStepRate = 0;
			}
			{
				D3D11_INPUT_ELEMENT_DESC & elemDesc = vtxFormat.elements.Add();
				elemDesc.SemanticName = "Normal";
				elemDesc.SemanticIndex = 0;
				elemDesc.Format = DXGI_FORMAT_R8G8B8A8_UINT;
				elemDesc.InputSlot = 0;
				elemDesc.AlignedByteOffset = D3D11_APPEND_ALIGNED_ELEMENT;
				elemDesc.InputSlotClass = D3D11_INPUT_PER_VERTEX_DATA;
				elemDesc.InstanceDataStepRate = 0;
			}
			graphics.resources->Create_InputLayout( vtxFormat.elements.ToPtr(), vtxFormat.elements.Num(), Vertex_P3F_TEX2F_N4UB::layout );
			dxDbgSetName( Vertex_P3F_TEX2F_N4UB::layout.p, "Vertex_P3F_TEX2F_N4UB" );
		}
		
		{
			dxVertexFormat	vtxFormat;
			{
				D3D11_INPUT_ELEMENT_DESC & elemDesc = vtxFormat.elements.Add();
				elemDesc.SemanticName = "Position";
				elemDesc.SemanticIndex = 0;
				elemDesc.Format = DXGI_FORMAT_R32G32B32_FLOAT;
				elemDesc.InputSlot = 0;
				elemDesc.AlignedByteOffset = D3D11_APPEND_ALIGNED_ELEMENT;
				elemDesc.InputSlotClass = D3D11_INPUT_PER_VERTEX_DATA;
				elemDesc.InstanceDataStepRate = 0;
			}
			{
				D3D11_INPUT_ELEMENT_DESC & elemDesc = vtxFormat.elements.Add();
				elemDesc.SemanticName = "TexCoord";
				elemDesc.SemanticIndex = 0;
				elemDesc.Format = DXGI_FORMAT_R32G32_FLOAT;
				elemDesc.InputSlot = 1;
				elemDesc.AlignedByteOffset = D3D11_APPEND_ALIGNED_ELEMENT;
				elemDesc.InputSlotClass = D3D11_INPUT_PER_VERTEX_DATA;
				elemDesc.InstanceDataStepRate = 0;
			}
			{
				D3D11_INPUT_ELEMENT_DESC & elemDesc = vtxFormat.elements.Add();
				elemDesc.SemanticName = "Normal";
				elemDesc.SemanticIndex = 0;
				elemDesc.Format = DXGI_FORMAT_R8G8B8A8_UINT;
				elemDesc.InputSlot = 1;
				elemDesc.AlignedByteOffset = D3D11_APPEND_ALIGNED_ELEMENT;
				elemDesc.InputSlotClass = D3D11_INPUT_PER_VERTEX_DATA;
				elemDesc.InstanceDataStepRate = 0;
			}
			{
				D3D11_INPUT_ELEMENT_DESC & elemDesc = vtxFormat.elements.Add();
				elemDesc.SemanticName = "Tangent";
				elemDesc.SemanticIndex = 0;
				elemDesc.Format = DXGI_FORMAT_R8G8B8A8_UINT;
				elemDesc.InputSlot = 1;
				elemDesc.AlignedByteOffset = D3D11_APPEND_ALIGNED_ELEMENT;
				elemDesc.InputSlotClass = D3D11_INPUT_PER_VERTEX_DATA;
				elemDesc.InstanceDataStepRate = 0;
			}
			graphics.resources->Create_InputLayout( vtxFormat.elements.ToPtr(), vtxFormat.elements.Num(), Vertex_P3F_TEX2F_N4UB_T4UB::layout );
			dxDbgSetName( Vertex_P3F_TEX2F_N4UB_T4UB::layout.p, "Vertex_P3F_TEX2F_N4UB_T4UB" );
		}
		
		{
			dxVertexFormat	vtxFormat;
			{
				D3D11_INPUT_ELEMENT_DESC & elemDesc = vtxFormat.elements.Add();
				elemDesc.SemanticName = "Position";
				elemDesc.SemanticIndex = 0;
				elemDesc.Format = DXGI_FORMAT_R32G32B32A32_FLOAT;
				elemDesc.InputSlot = 0;
				elemDesc.AlignedByteOffset = D3D11_APPEND_ALIGNED_ELEMENT;
				elemDesc.InputSlotClass = D3D11_INPUT_PER_VERTEX_DATA;
				elemDesc.InstanceDataStepRate = 0;
			}
			{
				D3D11_INPUT_ELEMENT_DESC & elemDesc = vtxFormat.elements.Add();
				elemDesc.SemanticName = "Color";
				elemDesc.SemanticIndex = 0;
				elemDesc.Format = DXGI_FORMAT_R32G32B32A32_FLOAT;
				elemDesc.InputSlot = 0;
				elemDesc.AlignedByteOffset = D3D11_APPEND_ALIGNED_ELEMENT;
				elemDesc.InputSlotClass = D3D11_INPUT_PER_VERTEX_DATA;
				elemDesc.InstanceDataStepRate = 0;
			}
			graphics.resources->Create_InputLayout( vtxFormat.elements.ToPtr(), vtxFormat.elements.Num(), Vertex_P4F_COL4F::layout );
			dxDbgSetName( Vertex_P4F_COL4F::layout.p, "Vertex_P4F_COL4F" );
		}
		
	}
	void Vertex_P3F::AssembleVertexData( const IndexedMesh& src, VertexData& dest )
	{
		dest.streams.SetNum( NumStreams );
		
		const SizeT vertexCount = src.numVertices;
		
		dest.streams[ xyz_stream ].buffer.stride = xyz_stream_size;
		dest.streams[ xyz_stream ].buffer.SetNum( vertexCount );
		
		TCopyVertices( cast(float3*)dest.streams[ xyz_stream ].ToPtr(), src.positions,
			vertexCount, xyz_stream_size, xyz_stream_offset );
		
	}
	
	void Vertex_P3F_TEX2F::AssembleVertexData( const IndexedMesh& src, VertexData& dest )
	{
		dest.streams.SetNum( NumStreams );
		
		const SizeT vertexCount = src.numVertices;
		
		dest.streams[ xyz_uv_stream ].buffer.stride = xyz_uv_stream_size;
		dest.streams[ xyz_uv_stream ].buffer.SetNum( vertexCount );
		
		TCopyVertices( cast(float3*)dest.streams[ xyz_uv_stream ].ToPtr(), src.positions,
			vertexCount, xyz_uv_stream_size, xyz_stream_offset );
		
		TCopyVertices( cast(float2*)dest.streams[ xyz_uv_stream ].ToPtr(), src.texCoords,
			vertexCount, xyz_uv_stream_size, uv_stream_offset );
		
	}
	
	void Vertex_P3F_TEX2F_N4UB::AssembleVertexData( const IndexedMesh& src, VertexData& dest )
	{
		dest.streams.SetNum( NumStreams );
		
		const SizeT vertexCount = src.numVertices;
		
		dest.streams[ xyz_uv_N_stream ].buffer.stride = xyz_uv_N_stream_size;
		dest.streams[ xyz_uv_N_stream ].buffer.SetNum( vertexCount );
		
		TCopyVertices( cast(float3*)dest.streams[ xyz_uv_N_stream ].ToPtr(), src.positions,
			vertexCount, xyz_uv_N_stream_size, xyz_stream_offset );
		
		TCopyVertices( cast(float2*)dest.streams[ xyz_uv_N_stream ].ToPtr(), src.texCoords,
			vertexCount, xyz_uv_N_stream_size, uv_stream_offset );
		
		TCopyVertices( cast(rxNormal4*)dest.streams[ xyz_uv_N_stream ].ToPtr(), src.normals,
			vertexCount, xyz_uv_N_stream_size, N_stream_offset );
		
	}
	
	void Vertex_P3F_TEX2F_N4UB_T4UB::AssembleVertexData( const IndexedMesh& src, VertexData& dest )
	{
		dest.streams.SetNum( NumStreams );
		
		const SizeT vertexCount = src.numVertices;
		
		dest.streams[ xyz_stream ].buffer.stride = xyz_stream_size;
		dest.streams[ xyz_stream ].buffer.SetNum( vertexCount );
		
		TCopyVertices( cast(float3*)dest.streams[ xyz_stream ].ToPtr(), src.positions,
			vertexCount, xyz_stream_size, xyz_stream_offset );
		
		
		dest.streams[ uv_N_T_stream ].buffer.stride = uv_N_T_stream_size;
		dest.streams[ uv_N_T_stream ].buffer.SetNum( vertexCount );
		
		TCopyVertices( cast(float2*)dest.streams[ uv_N_T_stream ].ToPtr(), src.texCoords,
			vertexCount, uv_N_T_stream_size, uv_stream_offset );
		
		TCopyVertices( cast(rxNormal4*)dest.streams[ uv_N_T_stream ].ToPtr(), src.normals,
			vertexCount, uv_N_T_stream_size, N_stream_offset );
		
		TCopyVertices( cast(rxNormal4*)dest.streams[ uv_N_T_stream ].ToPtr(), src.tangents,
			vertexCount, uv_N_T_stream_size, T_stream_offset );
		
	}
	
	void Vertex_P4F_COL4F::AssembleVertexData( const IndexedMesh& src, VertexData& dest )
	{
		dest.streams.SetNum( NumStreams );
		
		const SizeT vertexCount = src.numVertices;
		
		dest.streams[ xyzw_rgba_stream ].buffer.stride = xyzw_rgba_stream_size;
		dest.streams[ xyzw_rgba_stream ].buffer.SetNum( vertexCount );
		
		TCopyVertices( cast(float4*)dest.streams[ xyzw_rgba_stream ].ToPtr(), src.positions,
			vertexCount, xyzw_rgba_stream_size, xyzw_stream_offset );
		
		TCopyVertices( cast(float4*)dest.streams[ xyzw_rgba_stream ].ToPtr(), src.colors,
			vertexCount, xyzw_rgba_stream_size, rgba_stream_offset );
		
	}
	
	
	
	//===========================================================================
	//	Creation / Destruction
	//===========================================================================
	
	void Initialize()
	{
		SetupRenderTargets();
		SetupSamplerStates();
		SetupDepthStencilStates();
		SetupRasterizerStates();
		SetupBlendStates();
		SetupStateBlocks();
		CreateInputLayouts();
		SetupSharedSections();
		p_batched_lines::Initialize();
		p_deferred_fill_buffers_fallback::Initialize();
		p_fullscreen_colored_triangle_shader::Initialize();
		p_fullscreen_textured_triangle_shader::Initialize();
		p_test_shader::Initialize();
	}
	
	void Shutdown()
	{
		p_batched_lines::Shutdown();
		p_deferred_fill_buffers_fallback::Shutdown();
		p_fullscreen_colored_triangle_shader::Shutdown();
		p_fullscreen_textured_triangle_shader::Shutdown();
		p_test_shader::Shutdown();
		
		graphics.resources->Destroy_SamplerState( samplerState_SS_Point );
		graphics.resources->Destroy_SamplerState( samplerState_SS_Bilinear );
		graphics.resources->Destroy_SamplerState( samplerState_SS_Aniso );
		
		graphics.resources->Destroy_DepthStencilState( depthStencilState_DS_NormalZTestWriteNoStencil );
		graphics.resources->Destroy_DepthStencilState( depthStencilState_DS_NoZTestWriteNoStencil );
		
		graphics.resources->Destroy_RasterizerState( rasterizerState_RS_WireframeNoCullNoClip );
		graphics.resources->Destroy_RasterizerState( rasterizerState_RS_NoCull );
		graphics.resources->Destroy_RasterizerState( rasterizerState_RS_CullBack );
		
		graphics.resources->Destroy_BlendState( blendState_BS_NoBlending );
		
		graphics.resources->Destroy_RenderTarget( renderTarget_RT_Diffuse_SpecPower );
		graphics.resources->Destroy_RenderTarget( renderTarget_RT_Normal_SpecIntensity );
		graphics.resources->Destroy_RenderTarget( renderTarget_RT_LinearDepth );
		graphics.resources->Destroy_RenderTarget( renderTarget_RT_MotionXY );
		
		ZERO_OUT( renderState_Default );
		ZERO_OUT( renderState_Debug_NoCull );
		graphics.resources->Destroy_InputLayout( Vertex_P3F::layout );
		graphics.resources->Destroy_InputLayout( Vertex_P3F_TEX2F::layout );
		graphics.resources->Destroy_InputLayout( Vertex_P3F_TEX2F_N4UB::layout );
		graphics.resources->Destroy_InputLayout( Vertex_P3F_TEX2F_N4UB_T4UB::layout );
		graphics.resources->Destroy_InputLayout( Vertex_P4F_COL4F::layout );
		Shared_Globals::cb_PerFrame.Destroy();
		Shared_View::cb_PerView.Destroy();
		Shared_Object::cb_PerObject.Destroy();
	}
}

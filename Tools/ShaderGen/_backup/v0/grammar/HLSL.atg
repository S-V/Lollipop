/*
=============================================================================
	File:	HLSL.atg
	Desc:	Shader script grammar specification for CoCo/R.
			This is basically an extended HLSL grammar.
=============================================================================
*/

// The name after the keyword COMPILER is the grammar name and must match the name 
// after the keyword  END. The grammar name also denotes the topmost nonterminal 
// symbol (the start symbol). The parser specification must contain a production for this 
// symbol. 
COMPILER HLSL


//---------------------------------------------------------------------------
// Fields and methods of the generated parser.
// They are copied to the header file of the generated parser.
//---------------------------------------------------------------------------

private:
	const ParseFileInput &	input;
	ParseFileOutput &		output;
	UINT	numWarnings;
	UINT	numErrors;

public:
	wrSourceFile& ParsedFile() { return output.fileData; }

	wrLocation Location() const { return scanner->CurrLocation(); }
	const wrBuffer& TokenBuf() const { return t->text; }
	const char* TokenStr() const { return t->text.ToChars(); }

	UINT Line() const { return scanner->CurrLocation().line; }
	UINT Column() const { return scanner->CurrLocation().column; }

	const char* SourceFileName() const { return input.pathToSrcFile.ToChars(); }

	void Message( const char* msg )
	{
		mxPutf("%s: %s\n",SourceFileName(),msg);
	}
	void Warning( const char* fmt, ... )
	{
		++numWarnings;
		char	buffer[ MAX_STRING_CHARS ];
		MX_GET_VARARGS_ANSI( buffer, fmt );
		Warning( Line(), Column(), buffer );
	}
	void Warning( int line, int column, const char* msg )
	{
		++numWarnings;
		mxPutf("%s(%d,%d): Warning: %s\n",
			SourceFileName(),line,column,msg);
	}
	void Error( const char* fmt, ... )
	{
		++numErrors;
		char	buffer[ MAX_STRING_CHARS ];
		MX_GET_VARARGS_ANSI( buffer, fmt );
		Error( Line(), Column(), buffer );
		mxBeep(200);
	}
	void Error( int line, int column, const char* msg )
	{
		++numErrors;
		mxPutf("%s(%d,%d): Error: %s\n",
			SourceFileName(),line,column,msg);
		mxBeep(200);
	}
	void SyntaxError( int line, int column, const char* msg )
	{
		++numErrors;
		mxPutf("%s(%d,%d): Syntax error: %s\n",
			SourceFileName(),line,column,msg);
		mxBeep(200);
	}

	UINT NumWarnings() const { return numWarnings; }
	UINT NumErrors() const { return numErrors; }


	U32 TokenToU32( U32 minValue = 0, U32 maxValue = U32(-1) )
	{
		U32 v = ParseInteger( TokenStr() );
		if( (v < minValue) || (v > maxValue) ) {
			Error("expected an integer in range [%d..%d]",minValue,maxValue);
			return 0;
		}
		return v;
	}
	F32 TokenToF32( F32 minValue = MIN_FLOAT_32, F32 maxValue = MAX_FLOAT_32 )
	{
		F32 v = ParseFloat( TokenStr() );
		if( (v < minValue) || (v > maxValue) ) {
			Error("expected a floating-point value in range [%f..%f]",minValue,maxValue);
			return 0.0f;
		}
		return v;
	}

#define SETPOS(x)	(x).pos = this->Location()

//---------------------------------------------------------------------------
//	Scanner specification
//---------------------------------------------------------------------------

// By default, Coco/R generates scanners that are case sensitive.
// If this is not desired, one has to write IGNORECASE at the beginning of the scanner specification.
//
//IGNORECASE


CHARACTERS
	letter     = 'A'..'Z' + 'a'..'z' + '_'.
	oct        = '0'..'7'.	// the set of all octal digits
	digit      = '0'..'9'.	// the set of all decimal digits
	nzdigit    = '1'..'9'.	// the set of all non-zero digits
	hex        = digit + 'a'..'f' + 'A'..'F'.	// the set of all hexadecimal digits
	notQuote   = ANY - '"' - "\r\n".
	notApo     = ANY - '\'' - "\r\n".
	notDigit	= ANY - digit.	// any character that is not a digit

	tab        = '\t'.
	cr         = '\r'.
	lf         = '\n'.			// end of line
	newLine    = cr + lf.
	notNewLine = ANY - newLine .
	ws         = " " + tab + '\u000b' + '\u000c'.

TOKENS
	// identifier
	identifier    = letter {letter | digit}.

	// floating-point constant
	float_constant =
		( '.' digit {digit} [('e'|'E')  ['+'|'-'] digit {digit}]
			| digit {digit} '.' {digit} [('e'|'E')  ['+'|'-'] digit {digit}]
			| digit {digit} ('e'|'E')  ['+'|'-'] digit {digit}
		)
		['f'|'l'|'F'|'L']
		.

	// integer constant
	integer_constant =
		( nzdigit {digit}
			| '0' {oct}
			| ("0x"|"0X") hex {hex}
		)
		{'u'|'U'|'l'|'L'}
		.
		
	// character constant
	char_constant  = '\'' notApo {notApo} '\''. // no check for valid escape sequences

	// string constant
	string_constant   = '"' {notQuote} '"'.        // no check for valid escape sequences
	
	//optional_semicolon = {';'}.

	// tokens defined in order to get their names for LL(1) conflict resolvers
	auto      = "auto".
	case      = "case".
	cbuffer   = "cbuffer".
	char      = "char".
	const     = "const".
	default   = "default".
	double    = "double".
	enum      = "enum".
	extern    = "extern".
	float     = "float".
	int       = "int".
	long      = "long".
	register  = "register".
	short     = "short".
	signed    = "signed".
	static    = "static".
	struct    = "struct".
	typedef   = "typedef".
	union     = "union".
	unsigned  = "unsigned".
	void      = "void".
	volatile  = "volatile".
	comma     = ','.
	semicolon = ';'.
	colon     = ':'.
	star      = '*'.
	lpar      = '('.
	rpar      = ')'.
	lbrack    = '['.
	rbrack    = ']'.
	lbrace    = '{'.
	rbrace    = '}'.
	ellipsis  = "...".

	// DirectX-specific


// Pragmas are tokens that may occur anywhere in the input stream.
// They are excluded from the token  stream that is passed to the parser.
// Pragmas are declared like tokens, but they may  have a semantic action
//  associated with them that is executed whenever they are recognized by the scanner.
//
PRAGMAS
	//---- preprocessor commands (not handled here)
	ppDefine  = '#' {ws} "define" {notNewLine} newLine.
	ppUndef   = '#' {ws} "undef" {notNewLine} newLine.
	ppIf      = '#' {ws} "if" {notNewLine} newLine.
	ppElif    = '#' {ws} "elif" {notNewLine} newLine.
	ppElse    = '#' {ws} "else" {notNewLine} newLine.
	ppEndif   = '#' {ws} "endif" {notNewLine} newLine.
	ppInclude = '#' {ws} "include" {notNewLine} newLine.

// Comments are declared by specifying their opening and closing brackets.
// The keyword NESTED denotes that they can be nested.
//
COMMENTS FROM "//" TO lf			// C++-style one-line comment
COMMENTS FROM "/*" TO "*/"			// C-style multi-line comment
COMMENTS FROM "/+" TO "+/" NESTED	// D-style nested comment

// Characters such as blanks, tabulators or end-of-line symbols are usually considered
// as  white space that should be  ignored by the scanner.
//
IGNORE '\t' + '\r' + '\n'


//---------------------------------------------------------------------------
//	Parser specification
//---------------------------------------------------------------------------

PRODUCTIONS


HLSL
	= declaration {declaration}
	.

declaration
	= render_target_declaration
	| sampler_state_declaration
	| depth_stencil_state_declaration
	| rasterizer_state_declaration
	| blend_state_declaration
	| state_block_declaration
	| shader_program_declaration
	| ANY
	.

render_target_declaration =			(. wrRenderTarget& newRT = ParsedFile().renderTargets.Add(); newRT.pos = Location(); .)
	"RenderTarget" identifier		(. newRT.name = TokenBuf(); .)
	'{'
		( ("SizeX" integer_constant)	(. newRT.sizeX.SetAbsoluteSize( TokenToU32() ); .)
		| ("ScaleX" float_constant)		(. newRT.sizeX.SetRelativeSize( TokenToF32() ); .)
		)

		( ("SizeY" integer_constant)	(. newRT.sizeY.SetAbsoluteSize( TokenToU32() ); .)
		| ("ScaleY" float_constant)		(. newRT.sizeY.SetRelativeSize( TokenToF32() ); .)
		)

		"Format" identifier				(. newRT.format = TokenBuf(); .)

		[ "Info" string_constant ]		(. newRT.info = TokenBuf(); .)
	'}'
	.

sampler_state_declaration =			(. wrSamplerState& newSS = ParsedFile().samplerStates.Add(); newSS.pos = Location(); .)
	"SamplerState" identifier		(. newSS.name = TokenBuf(); .)
	'{'
		"Filter" identifier				(. newSS.Filter = TokenBuf(); .)
		[ "AddressU" identifier 		(. newSS.AddressU = TokenBuf(); .)]
		[ "AddressV" identifier 		(. newSS.AddressV = TokenBuf(); .)]
		[ "AddressW" identifier 		(. newSS.AddressW = TokenBuf(); .)]
		/*
		([ "MipLODBias" float_constant ]		(. Unimplemented; .))
		([ "MaxAnisotropy" integer_constant ]		(. Unimplemented; .))
		([ "ComparisonFunc" identifier ]		(. Unimplemented; .))
		//FLOAT BorderColor[ 4 ];			(. Unimplemented; .)
		([ "MinLOD" float_constant ]			(. Unimplemented; .))
		([ "MaxLOD" float_constant ]			(. Unimplemented; .))
		*/
	'}'
	.

depth_stencil_state_declaration =	(. wrDepthStencilState& newDS = ParsedFile().depthStencilStates.Add(); newDS.pos = Location(); .)
	"DepthStencilState" identifier		(. newDS.name = TokenBuf(); .)
	'{'
		"DepthEnable" boolean_constant		(. newDS.DepthEnable = TokenBuf(); .)
		"DepthWriteMask" bit_mask 		(. newDS.DepthWriteMask = TokenBuf(); .)
		"DepthFunc" identifier 				(. newDS.DepthFunc = TokenBuf(); .)
		"StencilEnable" boolean_constant 	(. newDS.StencilEnable = TokenBuf(); .)
	'}'
	.

rasterizer_state_declaration =	(. wrRasterizerState& newRS = ParsedFile().rasterizerStates.Add(); newRS.pos = Location(); .)
	"RasterizerState" identifier		(. newRS.name = TokenBuf(); .)
	'{'
		"FillMode" identifier						(. newRS.FillMode = TokenBuf(); .)
		"CullMode" identifier 						(. newRS.CullMode = TokenBuf(); .)
		[ "FrontCounterClockwise" boolean_constant 	(. newRS.FrontCounterClockwise = TokenBuf(); .)]
		[ "DepthBias" integer_constant 				(. newRS.DepthBias = TokenBuf(); .)]
		[ "DepthBiasClamp" float_constant			(. newRS.DepthBiasClamp = TokenBuf(); .)]
		[ "SlopeScaledDepthBias" float_constant 	(. newRS.SlopeScaledDepthBias = TokenBuf(); .)]
		[ "DepthClipEnable" boolean_constant 		(. newRS.DepthClipEnable = TokenBuf(); .)]
		[ "ScissorEnable" boolean_constant 			(. newRS.ScissorEnable = TokenBuf(); .)]
		[ "MultisampleEnable" boolean_constant 		(. newRS.MultisampleEnable = TokenBuf(); .)]
		[ "AntialiasedLineEnable" boolean_constant 	(. newRS.AntialiasedLineEnable = TokenBuf(); .)]
	'}'
	.


//
// Only one render target supported only!
//
blend_state_declaration =	(. wrBlendState& newBS = ParsedFile().blendStates.Add(); newBS.pos = Location(); .)
	"BlendState" identifier		(. newBS.name = TokenBuf(); .)
	'{'
		"BlendEnable" boolean_constant				(. newBS.BlendEnable = TokenBuf(); .)
		[ "AlphaToCoverageEnable" boolean_constant	(. newBS.AlphaToCoverageEnable = TokenBuf(); .)]
		[ "SrcBlend" identifier 					(. newBS.SrcBlend = TokenBuf(); .)]
		[ "DestBlend" identifier 					(. newBS.DestBlend = TokenBuf(); .)]
		[ "BlendOp" identifier 						(. newBS.BlendOp= TokenBuf(); .)]
		[ "SrcBlendAlpha" identifier				(. newBS.SrcBlendAlpha = TokenBuf(); .)]
		[ "DestBlendAlpha" identifier 				(. newBS.DestBlendAlpha = TokenBuf(); .)]
		[ "BlendOpAlpha" identifier 				(. newBS.BlendOpAlpha = TokenBuf(); .)]
		[ "RenderTargetWriteMask" bit_mask			(. newBS.RenderTargetWriteMask = TokenBuf(); .)]
	'}'
	.

state_block_declaration =	(. wrStateBlock& newSB = ParsedFile().stateBlocks.Add(); newSB.pos = Location(); .)
	"StateBlock" identifier		(. newSB.name = TokenBuf(); .)
	'{'
		[ "RasterizerState" identifier 				(. newSB.rasterizerState = TokenBuf(); .)]

		[ "DepthStencilState" identifier			(. newSB.depthStencilState = TokenBuf(); .)]
		[ "StencilRef" integer_constant 			(. newSB.stencilRef = TokenBuf(); .)]

		[ "BlendState" identifier 					(. newSB.blendState = TokenBuf(); .)]
		[ "BlendFactor" rgba_color< newSB.blendFactorRGBA > ]
		[ "SampleMask" bit_mask 					(. newSB.sampleMask = TokenBuf(); .)]
	'}'
	.

rgba_color< FColor & rgba > =
	"RGBA("
		float_constant	(. rgba.R = TokenToF32( 0.0f, 1.0f ); .)
		float_constant	(. rgba.G = TokenToF32( 0.0f, 1.0f ); .)
		float_constant	(. rgba.B = TokenToF32( 0.0f, 1.0f ); .)
		float_constant	(. rgba.A = TokenToF32( 0.0f, 1.0f ); .)
	')'
	.



bit_mask = identifier | integer_constant.

boolean_constant = identifier | integer_constant.













shader_program_declaration =	(. wrShaderProgram& newSP = ParsedFile().NewElement( this, ParsedFile().shaders ); SETPOS(newSP); .)
	"Shader" identifier			(. newSP.name = TokenBuf(); .)
	'{'
		[ shader_inputs ]
		"Code" 					(. ParseShaderCode( newSP, this ); .)
	'}'
	'='
	'{'
		"VertexShader"	identifier	(. newSP.vertexShader = TokenBuf(); .)
		"PixelShader"	identifier	(. newSP.pixelShader = TokenBuf(); .)
	'}'
	.

shader_inputs = "Inputs"
	'{'	(. ParsedFile().shaders.GetLast().startOfInputs = Location(); .)
		shader_variable_decl  {shader_variable_decl}
	'}'
	.

shader_variable_decl
	= constant_buffer_decl
	| sampler_state_decl
	| shader_resource_decl
	.

constant_buffer_decl =	(. wrShaderConstantBuffer& newCB = ParsedFile().NewConstantBuffer( this ); SETPOS(newCB); .)
	"cbuffer" identifier		(. newCB.name = TokenBuf(); .)
	[constant_buffer_register]
	'{'
		constant_buffer_element  {constant_buffer_element}
	'}' ';'
	.

constant_buffer_register
	= ':' "register"
	'('
		integer_constant		(. ParsedFile().LastConstantBuffer().iRegister = TokenToU32(0,MAX_CONSTANT_BUFFER_SLOTS-1); .)
	')'
	.

constant_buffer_element	=	(. wrCBVar& newCBElem = ParsedFile().LastConstantBuffer().elements.Add(); SETPOS(newCBElem); .)
		type_name			(. newCBElem.typeName = TokenBuf(); .)
		identifier			(. newCBElem.name = TokenBuf(); .)
		';'
	.

	
	

sampler_state_decl =	(. wrShaderSamplerState& newSS = ParsedFile().NewSamplerState( this ); SETPOS(newSS); .)
	"SamplerState" identifier		(. newSS.name = TokenBuf(); .)
	[
	':' "register"
	'('
		integer_constant		(. newSS.iRegister = TokenToU32(0,MAX_SAMPLER_STATE_SLOTS-1); .)
	')'
	]
	[
	'=' identifier		(. newSS.initializer = TokenBuf(); .)
	]
	';'
	.

	

shader_resource_decl =	(. wrShaderResource& newRes = ParsedFile().NewTexture( this ); SETPOS(newRes); .)
	"Texture2D" identifier		(. newRes.name = TokenBuf(); .)
	[
	':' "register"
	'('
		integer_constant		(. newRes.iRegister = TokenToU32(0,MAX_SHADER_RESOURCE_SLOTS-1); .)
	')'
	]
	[
	'=' identifier		(. newRes.initializer = TokenBuf(); .)
	]
	';'
	.

type_name = identifier
	.

	

// shader_code =
	// '{'
	// '}'
	// .


	
/*

//---------- Compilation Unit ----------

HLSL = 
	ExternalDecl {ExternalDecl}.
	
ExternalDecl = 
  DeclSpecifierList 
  ( Declarator 
    ( {Decl} '{' {IF(IsDecl()) Decl | Stat} '}'   // FunctionDef
    | ['=' Initializer] {',' InitDeclarator}  ';' // Decl
    )
  | ';'                                           // Decl
  ).


//---------- Declarations ----------

Decl = DeclSpecifierList [InitDeclarator {',' InitDeclarator}] ';'.

InitDeclarator = Declarator ['=' Initializer].

DeclSpecifierList = DeclSpecifier {IF(!IsDeclarator()) DeclSpecifier}.

DeclSpecifier =
		"typedef" | "extern" | "static" | "auto" | "register" // storage class specifier
	| "const" | "volatile"                                  // TypeQualifier
	| TypeSpecifier.

TypeSpecifier =
		"void" | "char" | "short" | "int" | "long" | "float" | "double" | "signed" | "unsigned"
	| identifier // type name
  | ("struct" | "union")
    ( identifier ['{' StructDecl {StructDecl} '}']
    | '{' StructDecl {StructDecl} '}'
    )
  | "enum"
    ( identifier ['{' Enumerator {',' Enumerator} '}']
    | '{' Enumerator {',' Enumerator} '}'
    ).

StructDecl = SpecifierQualifierList StructDeclarator {',' StructDeclarator} ';'.

StructDeclarator = Declarator [':' ConstExpr] | ':'  ConstExpr.

Enumerator = identifier ['=' ConstExpr].

SpecifierQualifierList =
  (TypeSpecifier | TypeQualifier)
  { IF(!IsDeclarator())
    (TypeSpecifier | TypeQualifier)
  }.

TypeQualifier = "const" | "volatile".

Declarator =
	[Pointer]
	( identifier
	| '(' Declarator ')'
	)
	{ '[' [ConstExpr] ']' 
	| '(' [IF(!IsType0()) IdentList | ParamTypeList] ')' 
	}.

Pointer = '*'  {TypeQualifier} {'*'  {TypeQualifier}}.

ParamTypeList = ParamDecl {IF(Continued1()) ',' ParamDecl} [',' "..."].

ParamDecl = DeclSpecifierList [IF(IsAbstractDecl()) AbstractDeclarator | Declarator].

IdentList = identifier {',' identifier}.

TypeName = // a better name would be Type
	SpecifierQualifierList [AbstractDeclarator].

AbstractDeclarator =
	Pointer [DirectAbstractDeclarator]
| DirectAbstractDeclarator.

DirectAbstractDeclarator =
	( '(' [AbstractDeclarator | ParamTypeList] ')'
	| '[' [ConstExpr] ']'
	)
	{ '[' [ConstExpr] ']' 
	| '(' [ParamTypeList] ')'
	}.

Initializer = 
    AssignExpr 
  | '{'  Initializer {IF(Continued()) ',' Initializer} [','] '}'.


//---------- Expressions ----------

Expr       = AssignExpr {','  AssignExpr}.
AssignExpr = CondExpr [AssignOp AssignExpr]. // relaxed
CondExpr   = LogOrExpr ['?' Expr ':' CondExpr].
LogOrExpr  = LogAndExpr {"||" LogAndExpr}.
LogAndExpr = OrExpr {"&&" OrExpr}.
OrExpr     = XorExpr {'|' XorExpr}.
XorExpr    = AndExpr {'^' AndExpr}.
AndExpr    = EqlExpr {'&' EqlExpr}.
EqlExpr    = RelExpr {("==" | "!=") RelExpr}.
RelExpr    = ShiftExpr {('<' | '>' | "<=" | ">=") ShiftExpr}.
ShiftExpr  = AddExpr {("<<" | ">>") AddExpr}.
AddExpr    = MultExpr {('+' | '-') MultExpr}.
MultExpr   = CastExpr {('*' | '/' | '%') CastExpr}.
CastExpr   = IF(IsType1()) '(' TypeName ')' CastExpr
           | UnaryExpr.

UnaryExpr =
  {"++" | "--"}
  ( PostfixExpr
  | UnaryOp CastExpr
  | "sizeof"  (IF(IsType1()) '(' TypeName ')' | UnaryExpr)
  ).

PostfixExpr =
  Primary
  { '[' Expr ']' 
  | '.'  identifier
  | "->" identifier
  | '(' [ArgExprList] ')' 
  | "++" 
  | "--"
  }.

Primary = identifier | integer_constant | float_constant | char_constant | string_constant | '(' Expr ')'.

ConstExpr = CondExpr.

ArgExprList = AssignExpr {','  AssignExpr}.

UnaryOp = '&' | '*' | '+' | '-' | '~' | '!'.

AssignOp = '=' | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | "&=" | "^=" | "|=".


//---------- Statements ----------

Stat =
	  IF(IsLabel()) (identifier | "case" ConstExpr | "default") ':' Stat
	| Expr ';'
	| '{' {IF(IsDecl()) Decl | Stat} '}'
	| "if" '(' Expr ')' Stat ["else" Stat]
	| "switch" '(' Expr ')' Stat
	| "while" '(' Expr ')' Stat
	| "do" Stat "while" '(' Expr ')' ';'
	| "for" '(' (IF(IsDecl()) Decl | [Expr] ';') [Expr] ';' [Expr] ')' Stat
	| "goto" identifier ';'
	| "continue" ';'
	| "break" ';'
	| "return" [Expr] ';'
	| ';'
	.
*/

END HLSL.
